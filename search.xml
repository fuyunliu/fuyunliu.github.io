<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Asyncio 笔记</title>
    <url>/2018/11/11/asyncio-tutorial/</url>
    <content><![CDATA[<!-- toc -->

<!-- markdownlint-disable MD033 -->

<blockquote><p>并发是指一次处理多件事。
并行是指一次做多件事。
二者不同，但是有联系。
一个关于结构，一个关于执行。
并发用于制定方案，用来解决可能（但未必）并行的问题。</p>
<p align="right">——Rob Pike
Go 语言的创造者之一</p></blockquote>

<a id="more"></a>

<hr>
<h2 id="异步版-hello-world"><a href="#异步版-hello-world" class="headerlink" title="异步版 hello-world"></a>异步版 <code>hello-world</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">.1</span>)</span><br><span class="line">    print(<span class="string">'world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3.7 提供</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># main 函数是个协程，直接运行不会执行操作</span></span><br><span class="line"><span class="comment"># main() --&gt; &lt;coroutine object main at 0x109be6d48&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="运行协程的三种方式"><a href="#运行协程的三种方式" class="headerlink" title="运行协程的三种方式"></a>运行协程的三种方式</h2><ul>
<li><code>asyncio.run()</code></li>
<li>使用 <code>await</code> 关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">say_after</span><span class="params">(delay, what)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    print(what)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">f"started at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">1</span>, <span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">await</span> say_after(<span class="number">2</span>, <span class="string">'world'</span>)</span><br><span class="line">    print(<span class="string">f"finished at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>asyncio.create_task()</code> 创建一个 <code>Task</code> 对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接对上面的 main 函数进行修改</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = asyncio.create_task(say_after(<span class="number">1</span>, <span class="string">'hello'</span>))</span><br><span class="line">    t2 = asyncio.create_task(say_after(<span class="number">2</span>, <span class="string">'world'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"started at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> t1</span><br><span class="line">    <span class="keyword">await</span> t2</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"finished at <span class="subst">&#123;time.strftime(<span class="string">'%X'</span>)&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Awaitable-对象"><a href="#Awaitable-对象" class="headerlink" title="Awaitable 对象"></a>Awaitable 对象</h2><p><code>awaitable</code> 对象是指可以在 <code>await</code> 表达式中使用的对象。</p>
<p><code>coroutines</code>, <code>Tasks</code> 和 <code>Futures</code> 是 <code>awaitable</code> 对象。</p>
<ul>
<li>协程 <code>coroutines</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">nested</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这中方式不会执行 nested 函数</span></span><br><span class="line">    nested()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># await</span></span><br><span class="line">    print(<span class="keyword">await</span> nested())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<ul>
<li>任务 <code>Tasks</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">nested</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    t = asyncio.create_task(nested())</span><br><span class="line">    <span class="keyword">await</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<ul>
<li>期物 <code>Futures</code></li>
</ul>
<h2 id="并发执行-Tasks"><a href="#并发执行-Tasks" class="headerlink" title="并发执行 Tasks"></a>并发执行 Tasks</h2><p>使用 <code>asyncio.gather</code> 并发执行 <code>Tasks</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(name, number)</span>:</span></span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">f"Task <span class="subst">&#123;name&#125;</span>: Compute factorial(<span class="subst">&#123;i&#125;</span>)..."</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        f *= i</span><br><span class="line">    print(<span class="string">f"Task <span class="subst">&#123;name&#125;</span>: factorial(<span class="subst">&#123;number&#125;</span>) = <span class="subst">&#123;f&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        factorial(<span class="string">'A'</span>, <span class="number">2</span>),</span><br><span class="line">        factorial(<span class="string">'B'</span>, <span class="number">3</span>),</span><br><span class="line">        factorial(<span class="string">'C'</span>, <span class="number">4</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h2 id="线程和协程的对比"><a href="#线程和协程的对比" class="headerlink" title="线程和协程的对比"></a>线程和协程的对比</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线程版以动画形式显示文本旋转指针</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Signal</span>:</span></span><br><span class="line">    go = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spin</span><span class="params">(msg, signal)</span>:</span></span><br><span class="line">    write, flush = sys.stdout.write, sys.stdout.flush</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> itertools.cycle(<span class="string">'|/-\\'</span>):</span><br><span class="line">        status = char + <span class="string">' '</span> + msg</span><br><span class="line">        write(status)</span><br><span class="line">        flush()</span><br><span class="line">        write(<span class="string">'\x08'</span> * len(status))</span><br><span class="line">        time.sleep(<span class="number">.1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> signal.go:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    write(<span class="string">' '</span> * len(status) + <span class="string">'\x08'</span> * len(status))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slow_funtion</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">supervisor</span><span class="params">()</span>:</span></span><br><span class="line">    signal = Signal()</span><br><span class="line">    spinner = threading.Thread(</span><br><span class="line">        target=spin,</span><br><span class="line">        args=(<span class="string">'thinking!'</span>, signal))</span><br><span class="line">    print(<span class="string">'spinner object: '</span>, spinner)</span><br><span class="line">    spinner.start()</span><br><span class="line">    result = slow_funtion()</span><br><span class="line">    signal.go = <span class="literal">False</span></span><br><span class="line">    spinner.join()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    result = supervisor()</span><br><span class="line">    print(<span class="string">'Answer: '</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 协程版以动画形式显示文本旋转指针</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">spin</span><span class="params">(msg)</span>:</span></span><br><span class="line">    write, flush = sys.stdout.write, sys.stdout.flush</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> itertools.cycle(<span class="string">'|/-\\'</span>):</span><br><span class="line">        status = char + <span class="string">' '</span> + msg</span><br><span class="line">        write(status)</span><br><span class="line">        flush()</span><br><span class="line">        write(<span class="string">'\x08'</span> * len(status))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">.1</span>)</span><br><span class="line">        <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    write(<span class="string">' '</span> * len(status) + <span class="string">'\x08'</span> * len(status))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">slow_funtion</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">supervisor</span><span class="params">()</span>:</span></span><br><span class="line">    spinner = asyncio.create_task(spin(<span class="string">'thinking!'</span>))</span><br><span class="line">    print(<span class="string">'spinner object: '</span>, spinner)</span><br><span class="line">    result = <span class="keyword">await</span> slow_funtion()</span><br><span class="line">    spinner.cancel()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般执行方式</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">result = loop.run_until_complete(supervisor())</span><br><span class="line">loop.close()</span><br><span class="line">print(<span class="string">'Answer: '</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3.7 执行方式</span></span><br><span class="line">asyncio.run(supervisor())</span><br></pre></td></tr></table></figure>

<ul>
<li>Task 对象像是实现协作式多任务的库（如 <code>gevent</code>）中的绿色线程（<code>green thread</code>）。</li>
<li>Task 对象用于驱动协程，Thread 对象用于调用可调用对象。</li>
<li>Task 对象不由自己手动实例化，而是由 <code>asyncio.create_task</code> 方法获取。</li>
<li>获取的 Task 对象已经排定了运行时间，而 Thread 实例需要调用 <code>start</code> 方法运行。</li>
<li>异步版 <code>slow_funtion</code> 是协程，由 <code>await</code> （就是 <code>yield from</code>）驱动。</li>
<li>终止线程需要借助外部变量 <code>go</code>,终止 Task 可以调用 <code>Task.cancel()</code> 实例方法，在协程内部抛出 <code>CancelledError</code> 异常，协程内部也可以捕获这个异常，处理终止请求。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>八大排序算法的 Python 实现</title>
    <url>/2018/03/14/8-sort-algorithm/</url>
    <content><![CDATA[<!-- toc -->

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count):</span><br><span class="line">        key = lists[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> lists[j] &gt; key:</span><br><span class="line">                lists[j + <span class="number">1</span>] = lists[j]</span><br><span class="line">                lists[j] = key</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img src="/images/Insertion_sort_animation.gif" alt="insert_sort"></p>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    step = <span class="number">2</span></span><br><span class="line">    group = count // step</span><br><span class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</span><br><span class="line">            j = i + group</span><br><span class="line">            <span class="keyword">while</span> j &lt; count:</span><br><span class="line">                k = j - group</span><br><span class="line">                key = lists[j]</span><br><span class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> lists[k] &gt; key:</span><br><span class="line">                        lists[k + group] = lists[k]</span><br><span class="line">                        lists[k] = key</span><br><span class="line">                    k -= group</span><br><span class="line">                j += group</span><br><span class="line">        group //= step</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/Sorting_shellsort_anim.gif" alt="shell_sort"></p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> lists[i] &gt; lists[j]:</span><br><span class="line">                lists[i], lists[j] = lists[j], lists[i]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/Bubble_sort_animation.gif" alt="bubble_sort"></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qs = <span class="keyword">lambda</span> xs: ((len(xs) &lt;= <span class="number">1</span> <span class="keyword">and</span> [xs]) <span class="keyword">or</span> [qs([x <span class="keyword">for</span> x <span class="keyword">in</span> xs[<span class="number">1</span>:] <span class="keyword">if</span> x &lt; xs[</span><br><span class="line">                 <span class="number">0</span>]]) + [xs[<span class="number">0</span>]] + qs([x <span class="keyword">for</span> x <span class="keyword">in</span> xs[<span class="number">1</span>:] <span class="keyword">if</span> x &gt;= xs[<span class="number">0</span>]])])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lists, left=<span class="number">0</span>, right=<span class="number">9</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    key = lists[left]</span><br><span class="line">    low = left</span><br><span class="line">    high = right</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[right] &gt;= key:</span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        lists[left] = lists[right]</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lists[left] &lt;= key:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        lists[right] = lists[left]</span><br><span class="line">    lists[right] = key</span><br><span class="line">    quick_sort(lists, low, left - <span class="number">1</span>)</span><br><span class="line">    quick_sort(lists, left + <span class="number">1</span>, high)</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/Sorting_quicksort_anim.gif" alt="quick_sort"></p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    count = len(lists)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</span><br><span class="line">        min = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</span><br><span class="line">            <span class="keyword">if</span> lists[min] &gt; lists[j]:</span><br><span class="line">                min = j</span><br><span class="line">        lists[min], lists[i] = lists[i], lists[min]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/Selection_sort_animation.gif" alt="select_sort"></p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lists, i, size)</span>:</span></span><br><span class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    max = i</span><br><span class="line">    <span class="keyword">if</span> i &lt; size // <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lists[lchild] &gt; lists[max]:</span><br><span class="line">            max = lchild</span><br><span class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lists[rchild] &gt; lists[max]:</span><br><span class="line">            max = rchild</span><br><span class="line">        <span class="keyword">if</span> max != i:</span><br><span class="line">            lists[max], lists[i] = lists[i], lists[max]</span><br><span class="line">            adjust_heap(lists, max, size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lists, size)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size // <span class="number">2</span>))[::<span class="number">-1</span>]:</span><br><span class="line">        adjust_heap(lists, i, size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    size = len(lists)</span><br><span class="line">    build_heap(lists, size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</span><br><span class="line">        lists[<span class="number">0</span>], lists[i] = lists[i], lists[<span class="number">0</span>]</span><br><span class="line">        adjust_heap(lists, <span class="number">0</span>, i)</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/Sorting_heapsort_anim.gif" alt="heap_sort"></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    result += left[i:]</span><br><span class="line">    result += right[j:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lists)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lists) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lists</span><br><span class="line">    num = len(lists) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(lists[:num])</span><br><span class="line">    right = merge_sort(lists[num:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br></pre></td></tr></table></figure>

<p><img src="/images/Merge_sort_animation2.gif" alt="merge_sort"></p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lists, radix=<span class="number">10</span>)</span>:</span></span><br><span class="line">    k = int(math.ceil(math.log(max(lists), radix)))</span><br><span class="line">    bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(radix)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lists:</span><br><span class="line">            bucket[j // (radix**(i - <span class="number">1</span>)) % radix].append(j)</span><br><span class="line">        <span class="keyword">del</span> lists[:]</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</span><br><span class="line">            lists += z</span><br><span class="line">            <span class="keyword">del</span> z[:]</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure>

<p><img src="/images/radix_sort.gif" alt="merge_sort"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">original_test = list(random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(<span class="string">"原始列表：    %s"</span> % original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line">insert_test = insert_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line">shell_test = shell_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line">bubble_test = bubble_sort(original_test)</span><br><span class="line"></span><br><span class="line">快速排序</span><br><span class="line">quick_test = quick_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接选择排序</span></span><br><span class="line">select_test = select_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line">heap_test = heap_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line">merge_test = merge_sort(original_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line">radix_test = radix_sort(original_test)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"插入排序：    %s"</span> % insert_test)</span><br><span class="line">print(<span class="string">"希尔排序：    %s"</span> % shell_test)</span><br><span class="line">print(<span class="string">"冒泡排序：    %s"</span> % bubble_test)</span><br><span class="line">print(<span class="string">"快速排序：    %s"</span> % quick_test)</span><br><span class="line">print(<span class="string">"直接选择排序：%s"</span> % select_test)</span><br><span class="line">print(<span class="string">"堆排序：      %s"</span> % heap_test)</span><br><span class="line">print(<span class="string">"归并排序：    %s"</span> % merge_test)</span><br><span class="line">print(<span class="string">"基数排序：    %s"</span> % radix_test)</span><br><span class="line">print(<span class="string">"快速排序：    %s"</span> % qs(original_test))</span><br></pre></td></tr></table></figure>

<p>本文来自：<a href="http://python.jobbole.com/82270" target="_blank" rel="noopener">八大排序算法的 Python 实现</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 离线安装 MySQL</title>
    <url>/2018/09/06/centos-install-mysql/</url>
    <content><![CDATA[<p>记录一下 CentOS 离线安装 MySQL 并配置多实列主从复制的过程，<br>如果有旧版 Mariadb，先卸载旧版 Mariadb。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="卸载系统自带的-Mariadb"><a href="#卸载系统自带的-Mariadb" class="headerlink" title="卸载系统自带的 Mariadb"></a>卸载系统自带的 <code>Mariadb</code></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mariadb        <span class="comment"># 查询出已安装的 mariadb</span></span><br><span class="line">rpm -e --nodeps filename    <span class="comment"># 上面列出的所有文件</span></span><br><span class="line">rm -f /etc/my.cnf           <span class="comment"># 删除配置文件</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-mysql-用户组"><a href="#创建-mysql-用户组" class="headerlink" title="创建 mysql 用户组"></a>创建 <code>mysql</code> 用户组</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>

<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.12-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure>

<h2 id="解压文件到目录-usr-local"><a href="#解压文件到目录-usr-local" class="headerlink" title="解压文件到目录 /usr/local"></a>解压文件到目录 <code>/usr/local</code></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp mysql-8.0.12-linux-glibc2.12-x86_64.tar.xz /usr/<span class="built_in">local</span>/mysql-8.0.12-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xz 结尾的是经过两层压缩的压缩包</span></span><br><span class="line"><span class="comment"># 先解压 xz</span></span><br><span class="line">xz -d your_file_name.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再解压 tar</span></span><br><span class="line">tar -xvf your_file_name.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接解压</span></span><br><span class="line">tar xvJf your_file_name.tar.xz</span><br><span class="line"></span><br><span class="line">tar xvJf mysql-8.0.12-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">mv mysql-8.0.12-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure>

<h2 id="配置-etc-my-cnf"><a href="#配置-etc-my-cnf" class="headerlink" title="配置 /etc/my.cnf"></a>配置 <code>/etc/my.cnf</code></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[mysqld_multi]</span><br><span class="line">mysqld     = /usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe</span><br><span class="line">mysqladmin = /usr/<span class="built_in">local</span>/mysql/bin/mysqladmin</span><br><span class="line">user       = root</span><br><span class="line"></span><br><span class="line"><span class="comment"># The MySQL server</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">[mysqld1]</span><br><span class="line">port                =33306</span><br><span class="line">datadir             =/data/mysqldata/data1</span><br><span class="line">socket              =/var/lib/mysql/mysql1.sock</span><br><span class="line">pid-file            =/var/lib/mysql/mysql1.pid</span><br><span class="line">user                =mysql</span><br><span class="line">server_id           =33306</span><br><span class="line">log_bin             =/data/mysqldata/data1/mysql-bin</span><br><span class="line">log_bin_index       =/data/mysqldata/data1/mysql-bin.index</span><br><span class="line">expire_logs_days    =10  <span class="comment"># 按需设置过期时间，表示保留最近10天的日志</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">[mysqld2]</span><br><span class="line">port                =33307</span><br><span class="line">datadir             =/data/mysqldata/data2</span><br><span class="line">socket              =/var/lib/mysql/mysql2.sock</span><br><span class="line">pid-file            =/var/lib/mysql/mysql2.pid</span><br><span class="line">user                =mysql</span><br><span class="line">server_id           =33307</span><br><span class="line">log_bin             =/data/mysqldata/data2/mysql-bin</span><br><span class="line">log_bin_index       =/data/mysqldata/data2/mysql-bin.index</span><br><span class="line">expire_logs_days    =10  <span class="comment"># 按需设置过期时间，表示保留最近10天的日志</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化数据目录"><a href="#初始化数据目录" class="headerlink" title="初始化数据目录"></a>初始化数据目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /var/lib/mysql</span><br><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br><span class="line"></span><br><span class="line">mkdir /data/mysqldata</span><br><span class="line">chown -R mysql:mysql /data/mysqldata</span><br><span class="line"></span><br><span class="line">mkdir /data/mysqldata/data1</span><br><span class="line">chown -R mysql:mysql /data/mysqldata/data1</span><br><span class="line"></span><br><span class="line">mkdir /data/mysqldata/data2</span><br><span class="line">chown -R mysql:mysql /data/mysqldata/data2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这种初始化数据库目录的方式过时了</span></span><br><span class="line">./mysql_install_db --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysqldata/data1 --user=mysql</span><br><span class="line">./mysql_install_db --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysqldata/data2 --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的初始化数据库目录方式，会在终端打印一个临时登入密码。</span></span><br><span class="line">./mysqld --initialize --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysqldata/data1 --user=mysql --console</span><br><span class="line">./mysqld --initialize --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/data/mysqldata/data2 --user=mysql --console</span><br></pre></td></tr></table></figure>

<h2 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line">mysqld_multi start 1</span><br><span class="line">mysqld_multi start 2</span><br><span class="line">mysqld_multi report</span><br></pre></td></tr></table></figure>

<h2 id="主库创建同步账号"><a href="#主库创建同步账号" class="headerlink" title="主库创建同步账号"></a>主库创建同步账号</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用刚才初始化数据库目录生成的临时密码登入</span></span><br><span class="line">./mysql -S /var/lib/mysql/mysql1.sock -p your-password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果忘记密码，可以在 my.cnf 的 mysqld 块中添加一行 skip-grant-tables = 1</span></span><br><span class="line"><span class="comment"># 可以进行无密码登入，修改成功之后去掉这一行然后重启数据库。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 root 密码</span></span><br><span class="line">USE mysql;</span><br><span class="line">UPDATE user SET authentication_string = PASSWORD(<span class="string">'new-password'</span>), password_expired = <span class="string">'N'</span>, password_last_changed = NOW() WHERE user = <span class="string">'root'</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权账户使得局域网内的机器可以访问数据库</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'new-password'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个同步账户</span></span><br><span class="line">CREATE USER <span class="string">'repl'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'repl-password'</span>;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO <span class="string">'repl'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">SHOW MASTER STATUS;</span><br><span class="line">SHOW BINARY LOGS;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果忘记设置日志过期时间，可以进入数据库进行全局设置，并手动清理过期日志</span></span><br><span class="line"><span class="comment"># 不要在数据库目录进行删除日志，这样会使得数据库日志索引不一致，导致自动清理失效</span></span><br><span class="line">SET GLOBAL EXPIRE_LOGS_DAYS = 10;</span><br><span class="line">FLUSH LOGS;  <span class="comment"># 触发日志清理，一般是在有新的日志生成的时候触发检查一次。</span></span><br><span class="line">SHOW BINARY LOGS;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以手动删除某个日志之前的所有日志</span></span><br><span class="line">PURGE BINARY LOGS TO <span class="string">'mysql-bin.000080'</span>;  <span class="comment"># 删除 80 之前的日志</span></span><br><span class="line">SHOW BINARY LOGS;</span><br></pre></td></tr></table></figure>

<h2 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改从库的配置文件</span></span><br><span class="line">server-id          =2</span><br><span class="line">relay-log          =/dbdata/data/relay-log</span><br><span class="line">relay-log-index    =/dbdata/data/relay-log.index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入数据库执行</span></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=‘master_host_name’, <span class="comment"># 主库的主机名</span></span><br><span class="line">MASTER_PORT=port_number <span class="comment"># 主库的端口号</span></span><br><span class="line">MASTER_USER=‘replication_user_name’, <span class="comment"># 复制的数据库用户名</span></span><br><span class="line">MASTER_PASSWORD=‘replication_password’, <span class="comment"># 复制的用户密码</span></span><br><span class="line">MASTER_LOG_FILE=‘recorded_log_file_name’, <span class="comment"># 主库的日志文件名</span></span><br><span class="line">MASTER_LOG_POS=recorded_log_position; <span class="comment"># 主库的日志文件位置</span></span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 安装 PhantomJS</title>
    <url>/2018/11/21/centos-install-phantomjs/</url>
    <content><![CDATA[<p><code>PhantomJS</code> 已经不再开发了，<code>seleniumn</code> 也警告使用 <code>PhantomJS</code> 是过时的，推荐使用 <code>headless</code> 版的 <code>Chrome</code> 或者 <code>Firefox</code>，但是有时候需要用到，够用就行，而且在 <code>Linux</code> 下安装也相对简单。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="安装-fontconfig-依赖"><a href="#安装-fontconfig-依赖" class="headerlink" title="安装 fontconfig 依赖"></a>安装 <code>fontconfig</code> 依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y fontconfig freetype freetype-devel fontconfig-devel libstdc++</span><br></pre></td></tr></table></figure>

<h2 id="下载-PhantomJS-并解压"><a href="#下载-PhantomJS-并解压" class="headerlink" title="下载 PhantomJS 并解压"></a>下载 <code>PhantomJS</code> 并解压</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装到此目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -jxvf phantomjs-2.1.1-linux-x86_64.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv phantomjs-2.1.1-linux-x86_64 phantomjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加软链接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/phantomjs/bin/phantomjs /usr/bin/phantomjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">phantomjs --version</span><br></pre></td></tr></table></figure>

<h2 id="用-selenium-驱动-PhantomJS"><a href="#用-selenium-驱动-PhantomJS" class="headerlink" title="用 selenium 驱动 PhantomJS"></a>用 <code>selenium</code> 驱动 <code>PhantomJS</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改浏览器头</span></span><br><span class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</span><br><span class="line">dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36"</span></span><br><span class="line">driver = webdriver.PhantomJS(desired_capabilities=dcap)</span><br><span class="line">driver.set_page_load_timeout(<span class="number">10</span>)</span><br><span class="line">driver.set_script_timeout(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="推荐使用的-Chrome-用法"><a href="#推荐使用的-Chrome-用法" class="headerlink" title="推荐使用的 Chrome 用法"></a>推荐使用的 <code>Chrome</code> 用法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无界面浏览器</span></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'headless'</span>)</span><br><span class="line">options.add_argument(<span class="string">'disable-gpu'</span>)</span><br><span class="line">options.add_argument(<span class="string">'window-size=1200x600'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 javascript</span></span><br><span class="line">prefs = &#123;<span class="string">'profile.managed_default_content_settings.javascript'</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止弹出式窗口</span></span><br><span class="line">prefs = &#123;<span class="string">"profile.default_content_setting_values.notifications"</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用图片</span></span><br><span class="line">prefs = &#123;<span class="string">'profile.managed_default_content_settings.images'</span>: <span class="number">2</span>&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(chrome_options=options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行JS</span></span><br><span class="line">driver.execute_script(<span class="string">'window.scrollTo(0, 0)'</span>)  <span class="comment"># scroll to top</span></span><br><span class="line">driver.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)  <span class="comment"># end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 编译安装 Python3</title>
    <url>/2018/03/12/centos-install-python3/</url>
    <content><![CDATA[<p>记录一下 CentOS 编译安装 Python3 的过程。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="安装系统相关依赖"><a href="#安装系统相关依赖" class="headerlink" title="安装系统相关依赖"></a>安装系统相关依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y openssl-static gcc sqlite-devel xz-devel bzip2-devel wget</span><br></pre></td></tr></table></figure>

<h2 id="下载-python3-包"><a href="#下载-python3-包" class="headerlink" title="下载 python3 包"></a>下载 <code>python3</code> 包</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.9/Python-3.6.9.tgz</span><br></pre></td></tr></table></figure>

<h2 id="解压到当前目录"><a href="#解压到当前目录" class="headerlink" title="解压到当前目录"></a>解压到当前目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.6.9.tgz</span><br></pre></td></tr></table></figure>

<h2 id="进入生成的目录进行配置"><a href="#进入生成的目录进行配置" class="headerlink" title="进入生成的目录进行配置"></a>进入生成的目录进行配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3 --<span class="built_in">enable</span>-loadable-sqlite-extensions --<span class="built_in">enable</span>-optimizations</span><br></pre></td></tr></table></figure>

<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="添加软连接"><a href="#添加软连接" class="headerlink" title="添加软连接"></a>添加软连接</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><code>yum</code> 搜索可用包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum search python3 | grep devel</span><br></pre></td></tr></table></figure>

<p>一键更新 <code>python</code> 包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip list --outdated --format=freeze | grep -v <span class="string">'^\-e'</span> | cut -d = -f 1  | xargs -n1 pip install -U</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/2019/04/12/docker-usage/</url>
    <content><![CDATA[<p>list docker cli commands</p>
<p><code>docker --help</code></p>
<p><code>docker contianer --help</code></p>
<p>docker version</p>
<p><code>docker --version</code></p>
<a id="more"></a>

<!-- toc -->

<p>docker info</p>
<p><code>docker info</code></p>
<p>list image</p>
<p><code>docker image ls</code> or <code>docker images</code></p>
<p>list container</p>
<p><code>docker container ls</code></p>
<p><code>docker container ls --all</code> # all mode</p>
<p><code>docker container ls -aq</code> # all in quite mode</p>
<p>run image</p>
<p><code>docker run hello-world</code></p>
<p><code>docker run -d -p 6379:6379 redis</code></p>
<p>login running container</p>
<p><code>docker exec -it &lt;name&gt; bash</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 处理 Csv 文件常见错误</title>
    <url>/2018/12/03/csv-error/</url>
    <content><![CDATA[<p>在用 Python 处理 csv 文件时遇到2个错误，记录下处理方法。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="字段包含-NULL-值"><a href="#字段包含-NULL-值" class="headerlink" title="字段包含 NULL 值"></a>字段包含 <code>NULL</code> 值</h2><p>csv 文件中字段包含 NULL 值会出错，解决方法是读取文件时把 NULL 值替换为空字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    fc = csv.DictReader((line.replace(<span class="string">'\0'</span>, <span class="string">''</span>) <span class="keyword">for</span> line <span class="keyword">in</span> f))</span><br><span class="line">    <span class="comment"># do something with fc</span></span><br></pre></td></tr></table></figure>

<h2 id="OverflowError-and-maxInt"><a href="#OverflowError-and-maxInt" class="headerlink" title="OverflowError and maxInt"></a><code>OverflowError and maxInt</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">maxInt = sys.maxsize</span><br><span class="line">decrement = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> decrement:</span><br><span class="line">    <span class="comment"># decrease the maxInt value by factor 10</span></span><br><span class="line">    <span class="comment"># as long as the OverflowError occurs.</span></span><br><span class="line"></span><br><span class="line">    decrement = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        csv.field_size_limit(maxInt)</span><br><span class="line">    <span class="keyword">except</span> OverflowError:</span><br><span class="line">        maxInt = int(maxInt / <span class="number">10</span>)</span><br><span class="line">        decrement = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>, <span class="string">'rt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    fc = csv.DictReader(f)</span><br><span class="line">    <span class="comment"># do something with fc</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>几种启动 Flask 应用的方式</title>
    <url>/2018/03/12/flask-start-up/</url>
    <content><![CDATA[<p>记录几种启动 Flask 应用的方式</p>
<a id="more"></a>

<!-- toc -->

<p>首先写一个简单的 <code>index.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, world!'</span></span><br></pre></td></tr></table></figure>

<h2 id="最简单的启动方式"><a href="#最简单的启动方式" class="headerlink" title="最简单的启动方式"></a>最简单的启动方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>这只能用于开发模式，可以设置<code>debug=True</code>开启调试模式，并且这是单线程同步的。</p>
<h2 id="用-tornado-驱动-flask"><a href="#用-tornado-驱动-flask" class="headerlink" title="用 tornado 驱动 flask"></a>用 <code>tornado</code> 驱动 <code>flask</code></h2><p>写一个<code>server.py</code>，并将上面<code>index.py</code>中的启动代码去掉，终端运行<code>python server.py</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.wsgi <span class="keyword">import</span> WSGIContainer</span><br><span class="line"><span class="keyword">from</span> tornado.httpserver <span class="keyword">import</span> HTTPServer</span><br><span class="line"><span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line"><span class="keyword">from</span> index <span class="keyword">import</span> app</span><br><span class="line">http_server = HTTPServer(WSGIContainer(app))</span><br><span class="line">http_server.listen(<span class="number">5000</span>)  <span class="comment"># flask默认的端口</span></span><br><span class="line">IOLoop.instance().start()</span><br></pre></td></tr></table></figure>

<p>这也是同步的，同一时间只能处理一个请求，可以写个简单的接口测试一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, world!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/test', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(n)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure>

<p>用postman同时发起5个请求，后台按顺序打印0-9，5个请求是一个一个执行的。</p>
<h2 id="用-twisted-驱动-flask"><a href="#用-twisted-驱动-flask" class="headerlink" title="用 twisted 驱动 flask"></a>用 <code>twisted</code> 驱动 <code>flask</code></h2><p>这个可以同时处理多个请求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, world!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/test', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(n)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    reactor_args = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_twisted_wsgi</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line">        <span class="keyword">from</span> twisted.web.server <span class="keyword">import</span> Site</span><br><span class="line">        <span class="keyword">from</span> twisted.web.wsgi <span class="keyword">import</span> WSGIResource</span><br><span class="line"></span><br><span class="line">        resource = WSGIResource(reactor, reactor.getThreadPool(), app)</span><br><span class="line">        site = Site(resource)</span><br><span class="line">        reactor.listenTCP(<span class="number">5000</span>, site)</span><br><span class="line">        reactor.run(**reactor_args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> app.debug:</span><br><span class="line">        <span class="comment"># Disable twisted signal handlers in development only.</span></span><br><span class="line">        reactor_args[<span class="string">'installSignalHandlers'</span>] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># Turn on auto reload.</span></span><br><span class="line">        <span class="keyword">import</span> werkzeug.serving</span><br><span class="line">        run_twisted_wsgi = werkzeug.serving.run_with_reloader(run_twisted_wsgi)</span><br><span class="line"></span><br><span class="line">    run_twisted_wsgi()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>外国小说鉴赏辞典</title>
    <url>/2018/11/03/foreign-novel-appreciation-dictionary/</url>
    <content><![CDATA[<p>外国小说鉴赏辞典，从图书馆拍来的目录，纯手码，很累！</p>
<a id="more"></a>

<!-- toc -->

<h2 id="古代至19世纪中期卷"><a href="#古代至19世纪中期卷" class="headerlink" title="古代至19世纪中期卷"></a>古代至19世纪中期卷</h2><table>
<thead>
<tr>
<th>书名</th>
<th>国籍</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>阿玛莉亚</td>
<td>阿根廷</td>
<td>马莫尔</td>
</tr>
<tr>
<td>魂归故里</td>
<td>波兰</td>
<td>克拉舍夫斯基</td>
</tr>
<tr>
<td>春香传</td>
<td>朝鲜</td>
<td>佚名</td>
</tr>
<tr>
<td>痴儿西木传</td>
<td>德国</td>
<td>格里美尔斯豪森</td>
</tr>
<tr>
<td><strong>少年维特的烦恼</strong></td>
<td>德国</td>
<td>歌德</td>
</tr>
<tr>
<td><strong>威廉·麦斯特的学习时代</strong></td>
<td>德国</td>
<td>歌德</td>
</tr>
<tr>
<td><strong>亲和力</strong></td>
<td>德国</td>
<td>歌德</td>
</tr>
<tr>
<td><strong>金罐</strong></td>
<td>德国</td>
<td>霍夫曼</td>
</tr>
<tr>
<td><strong>侏儒查赫斯</strong></td>
<td>德国</td>
<td>霍夫曼</td>
</tr>
<tr>
<td><strong>雄猫穆尔的生活观</strong></td>
<td>德国</td>
<td>霍夫曼</td>
</tr>
<tr>
<td>温亭娜</td>
<td>德国</td>
<td>富凯</td>
</tr>
<tr>
<td>彼得·史勒密尔的奇怪故事</td>
<td>德国</td>
<td>沙米索</td>
</tr>
<tr>
<td>茵梦湖</td>
<td>德国</td>
<td>施托姆</td>
</tr>
<tr>
<td><strong>驿站长</strong></td>
<td>俄国</td>
<td>普希金</td>
</tr>
<tr>
<td><strong>黑桃皇后</strong></td>
<td>俄国</td>
<td>普希金</td>
</tr>
<tr>
<td><strong>上尉的女儿</strong></td>
<td>俄国</td>
<td>普希金</td>
</tr>
<tr>
<td>狂人日记</td>
<td>俄国</td>
<td>果戈里</td>
</tr>
<tr>
<td>塔拉斯·布利巴</td>
<td>俄国</td>
<td>果戈里</td>
</tr>
<tr>
<td><strong>外套</strong></td>
<td>俄国</td>
<td>果戈里</td>
</tr>
<tr>
<td><strong>死魂灵</strong></td>
<td>俄国</td>
<td>果戈里</td>
</tr>
<tr>
<td>谁之罪</td>
<td>俄国</td>
<td>赫尔岑</td>
</tr>
<tr>
<td>偷东西的喜鹊</td>
<td>俄国</td>
<td>赫尔岑</td>
</tr>
<tr>
<td>平凡的故事</td>
<td>俄国</td>
<td>冈察洛夫</td>
</tr>
<tr>
<td>当代英雄</td>
<td>俄国</td>
<td>莱蒙托夫</td>
</tr>
<tr>
<td>木木</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td><strong>白夜</strong></td>
<td>俄国</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td><strong>巨人传</strong></td>
<td>法国</td>
<td>拉伯雷</td>
</tr>
<tr>
<td>吉尔·布拉斯</td>
<td>法国</td>
<td>勒萨日</td>
</tr>
<tr>
<td>波斯人信札</td>
<td>法国</td>
<td>孟德斯鸠</td>
</tr>
<tr>
<td>查第格</td>
<td>法国</td>
<td>伏尔泰</td>
</tr>
<tr>
<td>老实人</td>
<td>法国</td>
<td>伏尔泰</td>
</tr>
<tr>
<td>玛农·列斯戈</td>
<td>法国</td>
<td>普莱服神甫</td>
</tr>
<tr>
<td><strong>新爱洛伊丝</strong></td>
<td>法国</td>
<td>卢梭</td>
</tr>
<tr>
<td>爱弥儿</td>
<td>法国</td>
<td>卢梭</td>
</tr>
<tr>
<td>拉摩的侄子</td>
<td>法国</td>
<td>狄德罗</td>
</tr>
<tr>
<td>定命论者雅克和他的主人</td>
<td>法国</td>
<td>狄德罗</td>
</tr>
<tr>
<td>阿达拉</td>
<td>法国</td>
<td>夏多布里昂</td>
</tr>
<tr>
<td><strong>阿尔芒丝</strong></td>
<td>法国</td>
<td>司汤达</td>
</tr>
<tr>
<td><strong>红与黑</strong></td>
<td>法国</td>
<td>司汤达</td>
</tr>
<tr>
<td><strong>巴马修道院</strong></td>
<td>法国</td>
<td>司汤达</td>
</tr>
<tr>
<td><strong>驴皮记</strong></td>
<td>法国</td>
<td>巴尔扎克</td>
</tr>
<tr>
<td><strong>欧也妮·葛朗台</strong></td>
<td>法国</td>
<td>巴尔扎克</td>
</tr>
<tr>
<td><strong>高老头</strong></td>
<td>法国</td>
<td>巴尔扎克</td>
</tr>
<tr>
<td><strong>幻灭</strong></td>
<td>法国</td>
<td>巴尔扎克</td>
</tr>
<tr>
<td><strong>邦斯舅舅</strong></td>
<td>法国</td>
<td>巴尔扎克</td>
</tr>
<tr>
<td><strong>三个火枪手</strong></td>
<td>法国</td>
<td>大仲马</td>
</tr>
<tr>
<td><strong>基督山恩仇记</strong></td>
<td>法国</td>
<td>大仲马</td>
</tr>
<tr>
<td><strong>巴黎圣母院</strong></td>
<td>法国</td>
<td>雨果</td>
</tr>
<tr>
<td>高龙巴</td>
<td>法国</td>
<td>梅里美</td>
</tr>
<tr>
<td>嘉尔曼</td>
<td>法国</td>
<td>梅里美</td>
</tr>
<tr>
<td>巴黎的秘密</td>
<td>法国</td>
<td>欧仁·苏</td>
</tr>
<tr>
<td><strong>安吉堡的磨工</strong></td>
<td>法国</td>
<td>乔治·桑</td>
</tr>
<tr>
<td>一个世纪的忏悔</td>
<td>法国</td>
<td>缪塞</td>
</tr>
<tr>
<td>外祖母</td>
<td>捷克</td>
<td>涅姆佐娃</td>
</tr>
<tr>
<td>癞皮鹦鹉</td>
<td>墨西哥</td>
<td>利萨尔迪</td>
</tr>
<tr>
<td>瑞普·凡·温克尔</td>
<td>美国</td>
<td>欧文</td>
</tr>
<tr>
<td>睡谷的传说</td>
<td>美国</td>
<td>欧文</td>
</tr>
<tr>
<td>最后的莫西干人</td>
<td>美国</td>
<td>库柏</td>
</tr>
<tr>
<td>杀鹿人</td>
<td>美国</td>
<td>库柏</td>
</tr>
<tr>
<td>拉帕其尼医生的女儿</td>
<td>美国</td>
<td>霍桑</td>
</tr>
<tr>
<td>红字</td>
<td>美国</td>
<td>霍桑</td>
</tr>
<tr>
<td>七个尖角顶的宅第</td>
<td>美国</td>
<td>霍桑</td>
</tr>
<tr>
<td><strong>黑猫</strong></td>
<td>美国</td>
<td>爱伦·坡</td>
</tr>
<tr>
<td><strong>厄舍府的倒塌</strong></td>
<td>美国</td>
<td>爱伦·坡</td>
</tr>
<tr>
<td><strong>毛格街血案</strong></td>
<td>美国</td>
<td>爱伦·坡</td>
</tr>
<tr>
<td><strong>汤姆叔叔的小屋</strong></td>
<td>美国</td>
<td>斯托夫人</td>
</tr>
<tr>
<td><strong>白鲸</strong></td>
<td>美国</td>
<td>麦尔维尔</td>
</tr>
<tr>
<td>竹取物语</td>
<td>日本</td>
<td>佚名</td>
</tr>
<tr>
<td>源氏物语</td>
<td>日本</td>
<td>紫式部</td>
</tr>
<tr>
<td>平家物语</td>
<td>日本</td>
<td>佚名</td>
</tr>
<tr>
<td>浮世澡堂</td>
<td>日本</td>
<td>式亭三马</td>
</tr>
<tr>
<td>绿衣亨利</td>
<td>瑞士</td>
<td>凯勒</td>
</tr>
<tr>
<td>小癞子</td>
<td>西班牙</td>
<td>佚名</td>
</tr>
<tr>
<td><strong>堂吉诃德</strong></td>
<td>西班牙</td>
<td>塞万提斯</td>
</tr>
<tr>
<td>金驴记</td>
<td>古罗马</td>
<td>阿普列乌斯</td>
</tr>
<tr>
<td><strong>十日谈</strong></td>
<td>意大利</td>
<td>卜伽丘</td>
</tr>
<tr>
<td>太阳城</td>
<td>意大利</td>
<td>康帕内拉</td>
</tr>
<tr>
<td>约婚夫妇</td>
<td>意大利</td>
<td>孟佐尼</td>
</tr>
<tr>
<td><strong>坎特伯雷故事集</strong></td>
<td>英国</td>
<td>乔叟</td>
</tr>
<tr>
<td>天路历程</td>
<td>英国</td>
<td>班扬</td>
</tr>
<tr>
<td><strong>鲁宾逊漂流记</strong></td>
<td>英国</td>
<td>笛福</td>
</tr>
<tr>
<td><strong>格列佛游记</strong></td>
<td>英国</td>
<td>斯威夫特</td>
</tr>
<tr>
<td>帕梅拉</td>
<td>英国</td>
<td>理查森</td>
</tr>
<tr>
<td>大伟人江奈生·魏尔德传</td>
<td>英国</td>
<td>菲尔丁</td>
</tr>
<tr>
<td>汤姆·琼斯</td>
<td>英国</td>
<td>菲尔丁</td>
</tr>
<tr>
<td>感伤的旅程</td>
<td>英国</td>
<td>斯特恩</td>
</tr>
<tr>
<td>蓝登传</td>
<td>英国</td>
<td>斯摩莱特</td>
</tr>
<tr>
<td>威克菲牧师传</td>
<td>英国</td>
<td>哥尔斯密</td>
</tr>
<tr>
<td>爱丁堡监狱</td>
<td>英国</td>
<td>司各特</td>
</tr>
<tr>
<td>艾凡赫</td>
<td>英国</td>
<td>司各特</td>
</tr>
<tr>
<td><strong>理智与情感</strong></td>
<td>英国</td>
<td>奥斯丁</td>
</tr>
<tr>
<td><strong>傲慢与偏见</strong></td>
<td>英国</td>
<td>奥斯丁</td>
</tr>
<tr>
<td><strong>爱玛</strong></td>
<td>英国</td>
<td>奥斯丁</td>
</tr>
<tr>
<td>玛丽·巴顿</td>
<td>英国</td>
<td>盖斯凯尔夫人</td>
</tr>
<tr>
<td><strong>名利场</strong></td>
<td>英国</td>
<td>萨克雷</td>
</tr>
<tr>
<td>钮可谟一家</td>
<td>英国</td>
<td>李敦</td>
</tr>
<tr>
<td><strong>庞贝城的末日</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>匹克维克外传</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>雾都孤儿</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>老古玩店</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>大卫·考坡菲</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>简·爱</strong></td>
<td>英国</td>
<td>夏洛蒂·勃朗特</td>
</tr>
<tr>
<td><strong>呼啸山庄</strong></td>
<td>英国</td>
<td>艾米莉·勃朗特</td>
</tr>
</tbody></table>
<hr>
<h2 id="19世纪下半期卷"><a href="#19世纪下半期卷" class="headerlink" title="19世纪下半期卷"></a>19世纪下半期卷</h2><table>
<thead>
<tr>
<th>书名</th>
<th>国籍</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>为了面包</td>
<td>波兰</td>
<td>显克微支</td>
</tr>
<tr>
<td>火与剑</td>
<td>波兰</td>
<td>显克微支</td>
</tr>
<tr>
<td>洪流</td>
<td>波兰</td>
<td>显克微支</td>
</tr>
<tr>
<td>十字军骑士</td>
<td>波兰</td>
<td>显克微支</td>
</tr>
<tr>
<td>傀儡</td>
<td>波兰</td>
<td>普鲁斯</td>
</tr>
<tr>
<td>福地</td>
<td>波兰</td>
<td>莱蒙特</td>
</tr>
<tr>
<td>三色紫罗兰</td>
<td>德国</td>
<td>史托姆</td>
</tr>
<tr>
<td>白马骑士</td>
<td>德国</td>
<td>史托姆</td>
</tr>
<tr>
<td>艾菲·布里斯特</td>
<td>德国</td>
<td>冯塔纳</td>
</tr>
<tr>
<td>奥勃洛摩夫</td>
<td>俄国</td>
<td>冈察洛夫</td>
</tr>
<tr>
<td>悬崖</td>
<td>俄国</td>
<td>冈察洛夫</td>
</tr>
<tr>
<td>罗亭</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td>贵族之家</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td>前夜</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td>初恋</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td>父与子</td>
<td>俄国</td>
<td>屠格涅夫</td>
</tr>
<tr>
<td><strong>罪与罚</strong></td>
<td>俄国</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td><strong>白痴</strong></td>
<td>俄国</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td><strong>群魔</strong></td>
<td>俄国</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td><strong>卡拉马佐夫兄弟</strong></td>
<td>俄国</td>
<td>陀思妥耶夫斯基</td>
</tr>
<tr>
<td>怎么办？</td>
<td>俄国</td>
<td>车尔尼雪夫斯基</td>
</tr>
<tr>
<td>琉森</td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td>哥萨克</td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td><strong>战争与和平</strong></td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td><strong>安娜·卡列尼娜</strong></td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td>伊万·伊利奇之死</td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td><strong>复活</strong></td>
<td>俄国</td>
<td>列夫·托尔斯泰</td>
</tr>
<tr>
<td>大堂神父</td>
<td>俄国</td>
<td>列斯科夫</td>
</tr>
<tr>
<td>左撇子</td>
<td>俄国</td>
<td>列斯科夫</td>
</tr>
<tr>
<td>盲音乐家</td>
<td>俄国</td>
<td>柯罗连科</td>
</tr>
<tr>
<td>棕榈</td>
<td>俄国</td>
<td>迦尔洵</td>
</tr>
<tr>
<td><strong>变色龙</strong></td>
<td>俄国</td>
<td>契诃夫</td>
</tr>
<tr>
<td><strong>苦恼</strong></td>
<td>俄国</td>
<td>契诃夫</td>
</tr>
<tr>
<td><strong>草原</strong></td>
<td>俄国</td>
<td>契诃夫</td>
</tr>
<tr>
<td><strong>第六病室</strong></td>
<td>俄国</td>
<td>契诃夫</td>
</tr>
<tr>
<td><strong>装在套子里的人</strong></td>
<td>俄国</td>
<td>契诃夫</td>
</tr>
<tr>
<td><strong>悲惨世界</strong></td>
<td>法国</td>
<td>雨果</td>
</tr>
<tr>
<td><strong>海上劳工</strong></td>
<td>法国</td>
<td>雨果</td>
</tr>
<tr>
<td><strong>笑面人</strong></td>
<td>法国</td>
<td>雨果</td>
</tr>
<tr>
<td><strong>九三年</strong></td>
<td>法国</td>
<td>雨果</td>
</tr>
<tr>
<td><strong>包法利夫人</strong></td>
<td>法国</td>
<td>福楼拜</td>
</tr>
<tr>
<td>萨朗波</td>
<td>法国</td>
<td>福楼拜</td>
</tr>
<tr>
<td>情感教育</td>
<td>法国</td>
<td>福楼拜</td>
</tr>
<tr>
<td><strong>格兰特船长的儿女</strong></td>
<td>法国</td>
<td>凡尔纳</td>
</tr>
<tr>
<td>起义者</td>
<td>法国</td>
<td>瓦莱斯</td>
</tr>
<tr>
<td>小酒店</td>
<td>法国</td>
<td>左拉</td>
</tr>
<tr>
<td>萌芽</td>
<td>法国</td>
<td>左拉</td>
</tr>
<tr>
<td>金钱</td>
<td>法国</td>
<td>左拉</td>
</tr>
<tr>
<td>小东西</td>
<td>法国</td>
<td>都德</td>
</tr>
<tr>
<td>最后一课</td>
<td>法国</td>
<td>都德</td>
</tr>
<tr>
<td>苔依丝</td>
<td>法国</td>
<td>法郎士</td>
</tr>
<tr>
<td><strong>羊脂球</strong></td>
<td>法国</td>
<td>莫泊桑</td>
</tr>
<tr>
<td><strong>一生</strong></td>
<td>法国</td>
<td>莫泊桑</td>
</tr>
<tr>
<td><strong>我的叔叔于勒</strong></td>
<td>法国</td>
<td>莫泊桑</td>
</tr>
<tr>
<td><strong>项链</strong></td>
<td>法国</td>
<td>莫泊桑</td>
</tr>
<tr>
<td><strong>漂亮朋友</strong></td>
<td>法国</td>
<td>莫泊桑</td>
</tr>
<tr>
<td>起义者</td>
<td>菲律宾</td>
<td>黎萨尔</td>
</tr>
<tr>
<td>玛丽亚</td>
<td>哥伦比亚</td>
<td>伊萨克斯</td>
</tr>
<tr>
<td>马格斯·哈弗拉尔</td>
<td>荷兰</td>
<td>穆尔塔图里</td>
</tr>
<tr>
<td>野姑娘芭拉</td>
<td>捷克</td>
<td>聂姆佐娃</td>
</tr>
<tr>
<td>庄园内外</td>
<td>捷克</td>
<td>聂姆佐娃</td>
</tr>
<tr>
<td>竞选州长</td>
<td>美国</td>
<td>马克·吐温</td>
</tr>
<tr>
<td><strong>汤姆·索亚历险记</strong></td>
<td>美国</td>
<td>马克·吐温</td>
</tr>
<tr>
<td><strong>王子与贫儿</strong></td>
<td>美国</td>
<td>马克·吐温</td>
</tr>
<tr>
<td>哈克贝里·芬历险记</td>
<td>美国</td>
<td>马克·吐温</td>
</tr>
<tr>
<td>塞拉斯·拉帕姆的发迹</td>
<td>美国</td>
<td>豪威尔斯</td>
</tr>
<tr>
<td>黛西·米勒</td>
<td>美国</td>
<td>詹姆斯</td>
</tr>
<tr>
<td>一位女士的画像</td>
<td>美国</td>
<td>詹姆斯</td>
</tr>
<tr>
<td>嘉莉妹妹</td>
<td>美国</td>
<td>德莱塞</td>
</tr>
<tr>
<td>饥饿</td>
<td>挪威</td>
<td>汉姆生</td>
</tr>
<tr>
<td>阿马罗神父的罪恶</td>
<td>葡萄牙</td>
<td>克罗兹</td>
</tr>
<tr>
<td>舞姬</td>
<td>日本</td>
<td>森鸥外</td>
</tr>
<tr>
<td>浮云</td>
<td>日本</td>
<td>二叶亭四迷</td>
</tr>
<tr>
<td>慈悲心肠</td>
<td>西班牙</td>
<td>佩雷斯·加尔多斯</td>
</tr>
<tr>
<td>庭长夫人</td>
<td>西班牙</td>
<td>克拉林</td>
</tr>
<tr>
<td>金人</td>
<td>匈牙利</td>
<td>约卡伊·莫尔</td>
</tr>
<tr>
<td>圣彼得的伞</td>
<td>匈牙利</td>
<td>米克沙特·卡尔曼</td>
</tr>
<tr>
<td>奇婚记</td>
<td>匈牙利</td>
<td>米克沙特·卡尔曼</td>
</tr>
<tr>
<td><strong>斯巴达克思</strong></td>
<td>意大利</td>
<td>乔万尼奥里</td>
</tr>
<tr>
<td>女乞丐</td>
<td>印度</td>
<td>泰戈尔</td>
</tr>
<tr>
<td>饥饿的石头</td>
<td>印度</td>
<td>泰戈尔</td>
</tr>
<tr>
<td>妻子和女儿</td>
<td>英国</td>
<td>盖斯凯尔夫人</td>
</tr>
<tr>
<td><strong>艰难时世</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>双城记</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>远大前程</strong></td>
<td>英国</td>
<td>狄更斯</td>
</tr>
<tr>
<td><strong>教师</strong></td>
<td>英国</td>
<td>夏洛蒂·勃朗特</td>
</tr>
<tr>
<td>亚当·贝德</td>
<td>英国</td>
<td>乔治·艾略特</td>
</tr>
<tr>
<td>佛洛斯河磨坊</td>
<td>英国</td>
<td>乔治·艾略特</td>
</tr>
<tr>
<td>织工马南转</td>
<td>英国</td>
<td>乔治·艾略特</td>
</tr>
<tr>
<td>米德尔马契</td>
<td>英国</td>
<td>乔治·艾略特</td>
</tr>
<tr>
<td><strong>远离尘嚣</strong></td>
<td>英国</td>
<td>哈代</td>
</tr>
<tr>
<td><strong>还乡</strong></td>
<td>英国</td>
<td>哈代</td>
</tr>
<tr>
<td><strong>卡斯特桥市长</strong></td>
<td>英国</td>
<td>哈代</td>
</tr>
<tr>
<td><strong>德伯家的苔丝</strong></td>
<td>英国</td>
<td>哈代</td>
</tr>
<tr>
<td><strong>无名的裘德</strong></td>
<td>英国</td>
<td>哈代</td>
</tr>
<tr>
<td>化身博士</td>
<td>英国</td>
<td>斯蒂文森</td>
</tr>
<tr>
<td>诱拐</td>
<td>英国</td>
<td>斯蒂文森</td>
</tr>
<tr>
<td>金银岛</td>
<td>英国</td>
<td>斯蒂文森</td>
</tr>
<tr>
<td><strong>道林·格雷的画像</strong></td>
<td>英国</td>
<td>王尔德</td>
</tr>
<tr>
<td>黑暗的心</td>
<td>英国</td>
<td>康拉德</td>
</tr>
<tr>
<td>吉姆爷</td>
<td>英国</td>
<td>康拉德</td>
</tr>
<tr>
<td>牛虻</td>
<td>英国</td>
<td>伏尼契</td>
</tr>
<tr>
<td>丛林故事</td>
<td>英国</td>
<td>吉卜林</td>
</tr>
<tr>
<td>时间机器</td>
<td>英国</td>
<td>威尔斯</td>
</tr>
<tr>
<td>马丁·里瓦斯</td>
<td>智利</td>
<td>布莱斯特·加纳</td>
</tr>
</tbody></table>
<hr>
<h2 id="20世纪前期卷"><a href="#20世纪前期卷" class="headerlink" title="20世纪前期卷"></a>20世纪前期卷</h2><table>
<thead>
<tr>
<th>书名</th>
<th>国籍</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>都柏林人</td>
<td>爱尔兰</td>
<td>乔伊斯</td>
</tr>
<tr>
<td>一个青年艺术家的画像</td>
<td>爱尔兰</td>
<td>乔伊斯</td>
</tr>
<tr>
<td>尤利西斯</td>
<td>爱尔兰</td>
<td>乔伊斯</td>
</tr>
<tr>
<td><strong>一个陌生女人的来信</strong></td>
<td>奥地利</td>
<td>茨威格</td>
</tr>
<tr>
<td><strong>变形记</strong></td>
<td>奥地利</td>
<td>卡夫卡</td>
</tr>
<tr>
<td><strong>饥饿艺术家</strong></td>
<td>奥地利</td>
<td>卡夫卡</td>
</tr>
<tr>
<td><strong>城堡</strong></td>
<td>奥地利</td>
<td>卡夫卡</td>
</tr>
<tr>
<td><strong>地洞</strong></td>
<td>奥地利</td>
<td>卡夫卡</td>
</tr>
<tr>
<td>农民</td>
<td>波兰</td>
<td>莱蒙特</td>
</tr>
<tr>
<td>征服者贝莱</td>
<td>丹麦</td>
<td>尼克索</td>
</tr>
<tr>
<td>垃圾教授</td>
<td>德国</td>
<td>亨利希·曼</td>
</tr>
<tr>
<td>臣仆</td>
<td>德国</td>
<td>亨利希·曼</td>
</tr>
<tr>
<td>布登勃洛克一家</td>
<td>德国</td>
<td>托马斯·曼</td>
</tr>
<tr>
<td>死于威尼斯</td>
<td>德国</td>
<td>托马斯·曼</td>
</tr>
<tr>
<td>魔山</td>
<td>德国</td>
<td>托马斯·曼</td>
</tr>
<tr>
<td>荒原狼</td>
<td>德国</td>
<td>黑塞</td>
</tr>
<tr>
<td>纳尔齐斯与歌尔德蒙</td>
<td>德国</td>
<td>黑塞</td>
</tr>
<tr>
<td>柏林，亚历山大广场</td>
<td>德国</td>
<td>德布林</td>
</tr>
<tr>
<td><strong>西线无战事</strong></td>
<td>德国</td>
<td>雷马克</td>
</tr>
<tr>
<td>《基督与反基督》三部曲</td>
<td>俄国</td>
<td>梅列日科夫斯基</td>
</tr>
<tr>
<td>决斗</td>
<td>俄国</td>
<td>库普林</td>
</tr>
<tr>
<td>石榴石手镯</td>
<td>俄国</td>
<td>库普林</td>
</tr>
<tr>
<td>乡村</td>
<td>俄国</td>
<td>布宁</td>
</tr>
<tr>
<td>阿尔谢尼耶夫的一生</td>
<td>俄国</td>
<td>布宁</td>
</tr>
<tr>
<td>红笑</td>
<td>俄国</td>
<td>安德烈耶夫</td>
</tr>
<tr>
<td>七个被绞死者的故事</td>
<td>俄国</td>
<td>安德烈耶夫</td>
</tr>
<tr>
<td>企鹅岛</td>
<td>法国</td>
<td>法郎士</td>
</tr>
<tr>
<td>诸神渴了</td>
<td>法国</td>
<td>法郎士</td>
</tr>
<tr>
<td><strong>约翰·克里斯朵夫</strong></td>
<td>法国</td>
<td>罗曼·罗兰</td>
</tr>
<tr>
<td>母与子</td>
<td>法国</td>
<td>罗曼·罗兰</td>
</tr>
<tr>
<td>伪币制造者</td>
<td>法国</td>
<td>纪德</td>
</tr>
<tr>
<td><strong>追寻逝去的时光</strong></td>
<td>法国</td>
<td>普鲁斯特</td>
</tr>
<tr>
<td>火线-一个步兵班的日记</td>
<td>法国</td>
<td>巴比塞</td>
</tr>
<tr>
<td>苔蕾丝·德斯盖鲁</td>
<td>法国</td>
<td>莫里亚克</td>
</tr>
<tr>
<td>旋涡</td>
<td>哥伦比亚</td>
<td>里维拉</td>
</tr>
<tr>
<td><strong>好兵帅克</strong></td>
<td>捷克</td>
<td>哈谢克</td>
</tr>
<tr>
<td>折断的翅膀</td>
<td>黎巴嫩</td>
<td>纪伯伦</td>
</tr>
<tr>
<td><strong>麦琪的礼物</strong></td>
<td>美国</td>
<td>欧·亨利</td>
</tr>
<tr>
<td><strong>最后一片叶子</strong></td>
<td>美国</td>
<td>欧·亨利</td>
</tr>
<tr>
<td>章鱼</td>
<td>美国</td>
<td>诺里斯</td>
</tr>
<tr>
<td>珍尼姑娘</td>
<td>美国</td>
<td>德莱塞</td>
</tr>
<tr>
<td>美国悲剧</td>
<td>美国</td>
<td>德莱塞</td>
</tr>
<tr>
<td>啊，拓荒者！</td>
<td>美国</td>
<td>凯瑟</td>
</tr>
<tr>
<td>荒野的呼唤</td>
<td>美国</td>
<td>杰克·伦敦</td>
</tr>
<tr>
<td>小城畸人</td>
<td>美国</td>
<td>杰克·伦敦</td>
</tr>
<tr>
<td><strong>了不起的盖茨比</strong></td>
<td>美国</td>
<td>菲茨杰拉德</td>
</tr>
<tr>
<td>喧哗与骚动</td>
<td>美国</td>
<td>福克纳</td>
</tr>
<tr>
<td>我弥留之际</td>
<td>美国</td>
<td>福克纳</td>
</tr>
<tr>
<td>太阳照常升起</td>
<td>美国</td>
<td>海明威</td>
</tr>
<tr>
<td>永别了，武器</td>
<td>美国</td>
<td>海明威</td>
</tr>
<tr>
<td>情侣</td>
<td>缅甸</td>
<td>詹姆斯拉觉</td>
</tr>
<tr>
<td>劳伦斯之女克里斯丁</td>
<td>挪威</td>
<td>温塞特</td>
</tr>
<tr>
<td><strong>我是猫</strong></td>
<td>日本</td>
<td>夏目漱石</td>
</tr>
<tr>
<td>棉被</td>
<td>日本</td>
<td>田山花袋</td>
</tr>
<tr>
<td>破戒</td>
<td>日本</td>
<td>岛崎藤村</td>
</tr>
<tr>
<td>新珠</td>
<td>日本</td>
<td>菊池宽</td>
</tr>
<tr>
<td>罗生门</td>
<td>日本</td>
<td>芥川龙之介</td>
</tr>
<tr>
<td>橘子</td>
<td>日本</td>
<td>芥川龙之介</td>
</tr>
<tr>
<td>竹林中</td>
<td>日本</td>
<td>芥川龙之介</td>
</tr>
<tr>
<td>太阳</td>
<td>日本</td>
<td>横光利一</td>
</tr>
<tr>
<td>没有太阳的街</td>
<td>日本</td>
<td>德永直</td>
</tr>
<tr>
<td>蟹工船</td>
<td>日本</td>
<td>小林多喜二</td>
</tr>
<tr>
<td>雅考伯·冯·贡腾</td>
<td>瑞士</td>
<td>罗伯特·瓦尔泽</td>
</tr>
<tr>
<td>母亲</td>
<td>苏联</td>
<td>高尔基</td>
</tr>
<tr>
<td>奥库罗夫镇</td>
<td>苏联</td>
<td>高尔基</td>
</tr>
<tr>
<td>阿尔塔莫诺夫家的事业</td>
<td>苏联</td>
<td>高尔基</td>
</tr>
<tr>
<td>彼得堡</td>
<td>苏联</td>
<td>别雷</td>
</tr>
<tr>
<td><strong>我们</strong></td>
<td>苏联</td>
<td>扎米亚京</td>
</tr>
<tr>
<td>孽卵</td>
<td>苏联</td>
<td>布尔加科夫</td>
</tr>
<tr>
<td>狗心</td>
<td>苏联</td>
<td>布尔加科夫</td>
</tr>
<tr>
<td>第四十一</td>
<td>苏联</td>
<td>拉夫列尼约夫</td>
</tr>
<tr>
<td>基坑</td>
<td>苏联</td>
<td>普拉东诺夫</td>
</tr>
<tr>
<td>伊斯坦布尔的姑娘</td>
<td>土耳其</td>
<td>君泰金</td>
</tr>
<tr>
<td>堂娜芭芭拉</td>
<td>委内瑞拉</td>
<td>加列戈斯</td>
</tr>
<tr>
<td>迷雾</td>
<td>西班牙</td>
<td>乌纳穆诺</td>
</tr>
<tr>
<td>碧血黄沙</td>
<td>西班牙</td>
<td>布拉斯科·伊巴涅斯</td>
</tr>
<tr>
<td>孤独者</td>
<td>意大利</td>
<td>皮兰德娄</td>
</tr>
<tr>
<td>坛子</td>
<td>意大利</td>
<td>皮兰德娄</td>
</tr>
<tr>
<td>已故的帕斯卡尔</td>
<td>意大利</td>
<td>皮兰德娄</td>
</tr>
<tr>
<td>沉船</td>
<td>印度</td>
<td>泰戈尔</td>
</tr>
<tr>
<td>戈拉</td>
<td>印度</td>
<td>泰戈尔</td>
</tr>
<tr>
<td>斯里甘特</td>
<td>印度</td>
<td>查特吉</td>
</tr>
<tr>
<td>仁爱道院</td>
<td>印度</td>
<td>普列姆昌德</td>
</tr>
<tr>
<td>半斤小麦</td>
<td>印度</td>
<td>普列姆昌德</td>
</tr>
<tr>
<td>有产业的人</td>
<td>英国</td>
<td>高尔斯华绥</td>
</tr>
<tr>
<td>穿破裤子的慈善家</td>
<td>英国</td>
<td>特莱赛尔</td>
</tr>
<tr>
<td><strong>人生的枷锁</strong></td>
<td>英国</td>
<td>毛姆</td>
</tr>
<tr>
<td>看得见风景房间</td>
<td>英国</td>
<td>福斯特</td>
</tr>
<tr>
<td>印度之行</td>
<td>英国</td>
<td>福斯特</td>
</tr>
<tr>
<td>密林中的村庄</td>
<td>英国</td>
<td>伦纳德·伍尔夫</td>
</tr>
<tr>
<td>达洛卫夫人</td>
<td>英国</td>
<td>弗吉尼亚·伍尔夫</td>
</tr>
<tr>
<td>到灯塔去</td>
<td>英国</td>
<td>弗吉尼亚·伍尔夫</td>
</tr>
<tr>
<td><strong>儿子与情人</strong></td>
<td>英国</td>
<td>劳伦斯</td>
</tr>
<tr>
<td><strong>虹</strong></td>
<td>英国</td>
<td>劳伦斯</td>
</tr>
<tr>
<td>查泰莱夫人的情人</td>
<td>英国</td>
<td>劳伦斯</td>
</tr>
</tbody></table>
<hr>
<h2 id="20世纪中期卷"><a href="#20世纪中期卷" class="headerlink" title="20世纪中期卷"></a>20世纪中期卷</h2><table>
<thead>
<tr>
<th>书名</th>
<th>国籍</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>小径分岔的花园</td>
<td>阿根廷</td>
<td>博尔赫斯</td>
</tr>
<tr>
<td>环形废墟</td>
<td>阿根廷</td>
<td>博尔赫斯</td>
</tr>
<tr>
<td>人树</td>
<td>澳大利亚</td>
<td>怀特</td>
</tr>
<tr>
<td>一杯茶</td>
<td>澳大利亚</td>
<td>怀特</td>
</tr>
<tr>
<td><strong>象棋的故事</strong></td>
<td>奥地利</td>
<td>茨威格</td>
</tr>
<tr>
<td>无边的土地</td>
<td>巴西</td>
<td>亚马多</td>
</tr>
<tr>
<td>绿蒂在魏玛</td>
<td>德国</td>
<td>托马斯·曼</td>
</tr>
<tr>
<td>玻璃球游戏</td>
<td>德国</td>
<td>黑塞</td>
</tr>
<tr>
<td>戈雅</td>
<td>德国</td>
<td>福伊希特万格</td>
</tr>
<tr>
<td><strong>凯旋门</strong></td>
<td>德国</td>
<td>雷马克</td>
</tr>
<tr>
<td>第七个十字架</td>
<td>德国</td>
<td>西格斯</td>
</tr>
<tr>
<td>迷惘</td>
<td>德国</td>
<td>卡内蒂</td>
</tr>
<tr>
<td>小丑之见</td>
<td>德国</td>
<td>伯尔</td>
</tr>
<tr>
<td>淡漠的人</td>
<td>德国</td>
<td>伦茨</td>
</tr>
<tr>
<td>铁皮鼓</td>
<td>德国</td>
<td>格拉斯</td>
</tr>
<tr>
<td>猫与鼠</td>
<td>德国</td>
<td>格拉斯</td>
</tr>
<tr>
<td>分裂的天空</td>
<td>德国</td>
<td>沃尔夫</td>
</tr>
<tr>
<td>俄罗斯森林</td>
<td>俄罗斯</td>
<td>列昂诺夫</td>
</tr>
<tr>
<td>伊万·杰尼索维奇的一天</td>
<td>俄罗斯</td>
<td>索尔仁尼琴</td>
</tr>
<tr>
<td>癌病房</td>
<td>俄罗斯</td>
<td>索尔仁尼琴</td>
</tr>
<tr>
<td>蒂博一家</td>
<td>法国</td>
<td>马丁·杜·加尔</td>
</tr>
<tr>
<td>蛇结</td>
<td>法国</td>
<td>莫里亚克</td>
</tr>
<tr>
<td>小王子</td>
<td>法国</td>
<td>圣埃克絮佩里</td>
</tr>
<tr>
<td>人的命运</td>
<td>法国</td>
<td>马尔罗</td>
</tr>
<tr>
<td>法兰西组曲</td>
<td>法国</td>
<td>内米洛夫斯基</td>
</tr>
<tr>
<td>恶心</td>
<td>法国</td>
<td>萨特</td>
</tr>
<tr>
<td>墙</td>
<td>法国</td>
<td>萨特</td>
</tr>
<tr>
<td><strong>局外人</strong></td>
<td>法国</td>
<td>加缪</td>
</tr>
<tr>
<td><strong>鼠疫</strong></td>
<td>法国</td>
<td>加缪</td>
</tr>
<tr>
<td>弗兰德公路</td>
<td>法国</td>
<td>西蒙</td>
</tr>
<tr>
<td>琴声如诉</td>
<td>法国</td>
<td>杜拉斯</td>
</tr>
<tr>
<td>橡皮</td>
<td>法国</td>
<td>罗伯-格里耶</td>
</tr>
<tr>
<td>窥视者</td>
<td>法国</td>
<td>罗伯-格里耶</td>
</tr>
<tr>
<td>变</td>
<td>法国</td>
<td>布托尔</td>
</tr>
<tr>
<td>你好，忧愁</td>
<td>法国</td>
<td>萨冈</td>
</tr>
<tr>
<td>伊萨贝尔在马孔多观雨时的独白</td>
<td>哥伦比亚</td>
<td>马尔克斯</td>
</tr>
<tr>
<td>百年孤独</td>
<td>哥伦比亚</td>
<td>马尔克斯</td>
</tr>
<tr>
<td>消失了的足迹</td>
<td>古巴</td>
<td>卡彭铁尔</td>
</tr>
<tr>
<td>查密莉雅</td>
<td>吉尔吉斯斯坦</td>
<td>艾特玛托夫</td>
</tr>
<tr>
<td>愚人船</td>
<td>美国</td>
<td>波特</td>
</tr>
<tr>
<td>北回归线</td>
<td>美国</td>
<td>米勒</td>
</tr>
<tr>
<td>夜色温柔</td>
<td>美国</td>
<td>菲茨杰拉德</td>
</tr>
<tr>
<td>八月之光</td>
<td>美国</td>
<td>福克纳</td>
</tr>
<tr>
<td>押沙龙，押沙龙！</td>
<td>美国</td>
<td>福克纳</td>
</tr>
<tr>
<td>熊</td>
<td>美国</td>
<td>福克纳</td>
</tr>
<tr>
<td>乞力马扎罗的雪</td>
<td>美国</td>
<td>海明威</td>
</tr>
<tr>
<td><strong>老人与海</strong></td>
<td>美国</td>
<td>海明威</td>
</tr>
<tr>
<td><strong>洛丽塔</strong></td>
<td>美国</td>
<td>博纳科夫</td>
</tr>
<tr>
<td>市场街的斯宾诺莎</td>
<td>美国</td>
<td>辛格</td>
</tr>
<tr>
<td>店员</td>
<td>美国</td>
<td>马拉默德</td>
</tr>
<tr>
<td>魔桶</td>
<td>美国</td>
<td>马拉默德</td>
</tr>
<tr>
<td>赫索格</td>
<td>美国</td>
<td>贝娄</td>
</tr>
<tr>
<td>伤心咖啡馆之歌</td>
<td>美国</td>
<td>麦卡勒斯</td>
</tr>
<tr>
<td>麦田里的守望者</td>
<td>美国</td>
<td>塞林格</td>
</tr>
<tr>
<td>在路上</td>
<td>美国</td>
<td>凯鲁亚克</td>
</tr>
<tr>
<td>五号屠场</td>
<td>美国</td>
<td>冯内古特</td>
</tr>
<tr>
<td><strong>第二十二条军规</strong></td>
<td>美国</td>
<td>海勒</td>
</tr>
<tr>
<td>裸者与死者</td>
<td>美国</td>
<td>梅勒</td>
</tr>
<tr>
<td>好人难寻</td>
<td>美国</td>
<td>奥康纳</td>
</tr>
<tr>
<td>他们</td>
<td>美国</td>
<td>奥茨</td>
</tr>
<tr>
<td>城市与狗</td>
<td>秘鲁</td>
<td>略萨</td>
</tr>
<tr>
<td>最明净的地区</td>
<td>墨西哥</td>
<td>富恩特斯</td>
</tr>
<tr>
<td>诺言</td>
<td>瑞士</td>
<td>迪伦马特</td>
</tr>
<tr>
<td>细雪</td>
<td>日本</td>
<td>谷崎润一郎</td>
</tr>
<tr>
<td>上海</td>
<td>日本</td>
<td>横光利一</td>
</tr>
<tr>
<td>来到农村的文工队</td>
<td>日本</td>
<td>德永直</td>
</tr>
<tr>
<td><strong>雪国</strong></td>
<td>日本</td>
<td>川端康成</td>
</tr>
<tr>
<td>睡美人</td>
<td>日本</td>
<td>川端康成</td>
</tr>
<tr>
<td>“帝国银行事件”之谜</td>
<td>日本</td>
<td>松本清账</td>
</tr>
<tr>
<td>西阵之蝶</td>
<td>日本</td>
<td>水上勉</td>
</tr>
<tr>
<td>骏河夫人</td>
<td>日本</td>
<td>司马辽太郎</td>
</tr>
<tr>
<td>潮骚</td>
<td>日本</td>
<td>三岛由纪夫</td>
</tr>
<tr>
<td>金阁寺</td>
<td>日本</td>
<td>三岛由纪夫</td>
</tr>
<tr>
<td>黑衣</td>
<td>日本</td>
<td>有吉佐和子</td>
</tr>
<tr>
<td>饲育</td>
<td>日本</td>
<td>大江健三郎</td>
</tr>
<tr>
<td>万延元年的足球</td>
<td>日本</td>
<td>大江健三郎</td>
</tr>
<tr>
<td>苦难的历程</td>
<td>苏联</td>
<td>阿列克赛·托尔斯泰</td>
</tr>
<tr>
<td><strong>日瓦戈医生</strong></td>
<td>苏联</td>
<td>帕斯捷尔纳克</td>
</tr>
<tr>
<td><strong>大师和玛格丽特</strong></td>
<td>苏联</td>
<td>布尔加科夫</td>
</tr>
<tr>
<td>静静的顿河</td>
<td>苏联</td>
<td>肖洛霍夫</td>
</tr>
<tr>
<td>一个人的遭遇</td>
<td>苏联</td>
<td>肖洛霍夫</td>
</tr>
<tr>
<td>基督的最后诱惑</td>
<td>希腊</td>
<td>卡赞扎基斯</td>
</tr>
<tr>
<td>房间与街道</td>
<td>意大利</td>
<td>摩拉维亚</td>
</tr>
<tr>
<td>分成两半的子爵</td>
<td>意大利</td>
<td>卡尔维诺</td>
</tr>
<tr>
<td><strong>刀锋</strong></td>
<td>英国</td>
<td>毛姆</td>
</tr>
<tr>
<td>海浪</td>
<td>英国</td>
<td>伍尔夫</td>
</tr>
<tr>
<td>美妙的新世界</td>
<td>英国</td>
<td>赫胥黎</td>
</tr>
<tr>
<td>城堡</td>
<td>英国</td>
<td>克罗宁</td>
</tr>
<tr>
<td><strong>一九八四</strong></td>
<td>英国</td>
<td>奥威尔</td>
</tr>
<tr>
<td>问题的核心</td>
<td>英国</td>
<td>格林</td>
</tr>
<tr>
<td>蝇王</td>
<td>英国</td>
<td>戈尔丁</td>
</tr>
<tr>
<td>发条橙</td>
<td>英国</td>
<td>伯吉斯</td>
</tr>
<tr>
<td>沙堡</td>
<td>英国</td>
<td>默多克</td>
</tr>
<tr>
<td>金色笔记</td>
<td>英国</td>
<td>莱辛</td>
</tr>
<tr>
<td>幸运的吉姆</td>
<td>英国</td>
<td>艾米斯</td>
</tr>
<tr>
<td>法国中尉的女人</td>
<td>英国</td>
<td>福尔斯</td>
</tr>
<tr>
<td>戈丹</td>
<td>印度</td>
<td>普列姆昌德</td>
</tr>
<tr>
<td>黑水洋彼岸</td>
<td>印度</td>
<td>安纳德</td>
</tr>
</tbody></table>
<hr>
<h2 id="20世纪后期卷"><a href="#20世纪后期卷" class="headerlink" title="20世纪后期卷"></a>20世纪后期卷</h2><table>
<thead>
<tr>
<th>书名</th>
<th>国籍</th>
<th>作者</th>
</tr>
</thead>
<tbody><tr>
<td>蜘蛛女之吻</td>
<td>阿根廷</td>
<td>普伊格</td>
</tr>
<tr>
<td>平民史诗</td>
<td>埃及</td>
<td>马哈福兹</td>
</tr>
<tr>
<td>风暴眼</td>
<td>澳大利亚</td>
<td>怀特</td>
</tr>
<tr>
<td>美好的美好的时光</td>
<td>奥地利</td>
<td>耶利内克</td>
</tr>
<tr>
<td>钢琴教师</td>
<td>奥地利</td>
<td>耶利内克</td>
</tr>
<tr>
<td>情欲</td>
<td>奥地利</td>
<td>耶利内克</td>
</tr>
<tr>
<td>浪女回归</td>
<td>巴西</td>
<td>亚马多</td>
</tr>
<tr>
<td>我坐在彼得拉河畔哭泣</td>
<td>巴西</td>
<td>科埃略</td>
</tr>
<tr>
<td>韦罗妮卡决定去死</td>
<td>巴西</td>
<td>科埃略</td>
</tr>
<tr>
<td>方尖碑</td>
<td>白俄罗斯</td>
<td>贝科夫</td>
</tr>
<tr>
<td>战争中没有女性</td>
<td>白俄罗斯</td>
<td>阿列克茜叶维契</td>
</tr>
<tr>
<td>惊马奔逃</td>
<td>德国</td>
<td>瓦尔泽</td>
</tr>
<tr>
<td>我的世纪</td>
<td>德国</td>
<td>格拉斯</td>
</tr>
<tr>
<td>献词</td>
<td>德国</td>
<td>施特劳斯</td>
</tr>
<tr>
<td>香水-一个谋杀犯的故事</td>
<td>德国</td>
<td>聚斯金德</td>
</tr>
<tr>
<td>白比姆黑耳朵</td>
<td>俄罗斯</td>
<td>特罗耶波尔斯基</td>
</tr>
<tr>
<td>一幅画</td>
<td>俄罗斯</td>
<td>格拉宁</td>
</tr>
<tr>
<td>永远十九岁</td>
<td>俄罗斯</td>
<td>巴拉克诺夫</td>
</tr>
<tr>
<td>百慕大三角</td>
<td>俄罗斯</td>
<td>邦达列夫</td>
</tr>
<tr>
<td>鱼王</td>
<td>俄罗斯</td>
<td>阿斯塔菲耶夫</td>
</tr>
<tr>
<td>被取消的演出</td>
<td>俄罗斯</td>
<td>奥库扎瓦</td>
</tr>
<tr>
<td>活下去，并且要记住</td>
<td>俄罗斯</td>
<td>拉斯普京</td>
</tr>
<tr>
<td>告别马焦拉</td>
<td>俄罗斯</td>
<td>拉斯普京</td>
</tr>
<tr>
<td>命运线</td>
<td>俄罗斯</td>
<td>哈里托诺夫</td>
</tr>
<tr>
<td>书市上的斯薇特兰娜</td>
<td>俄罗斯</td>
<td>马卡宁</td>
</tr>
<tr>
<td>美狄娅和她的孩子们</td>
<td>俄罗斯</td>
<td>乌利茨卡娅</td>
</tr>
<tr>
<td>夏伯阳与虚空</td>
<td>俄罗斯</td>
<td>佩列文</td>
</tr>
<tr>
<td>乡间的房子</td>
<td>俄罗斯</td>
<td>瓦尔拉莫夫</td>
</tr>
<tr>
<td>暗店街</td>
<td>法国</td>
<td>莫迪亚诺</td>
</tr>
<tr>
<td>我走了</td>
<td>法国</td>
<td>艾什诺兹</td>
</tr>
<tr>
<td>流浪的星星</td>
<td>法国</td>
<td>克莱齐奥</td>
</tr>
<tr>
<td><strong>霍乱时期的爱情</strong></td>
<td>哥伦比亚</td>
<td>马尔克斯</td>
</tr>
<tr>
<td>乙火</td>
<td>韩国</td>
<td>金东里</td>
</tr>
<tr>
<td>一日长于百年</td>
<td>吉尔吉斯斯坦</td>
<td>艾特玛托夫</td>
</tr>
<tr>
<td>断头台</td>
<td>吉尔吉斯斯坦</td>
<td>艾特玛托夫</td>
</tr>
<tr>
<td>斯通家史札记</td>
<td>加拿大</td>
<td>希尔兹</td>
</tr>
<tr>
<td>笑忘录</td>
<td>捷克</td>
<td>昆拉德</td>
</tr>
<tr>
<td><strong>不能承受的生命之轻</strong></td>
<td>捷克</td>
<td>昆拉德</td>
</tr>
<tr>
<td>冤家，一个爱情故事</td>
<td>美国</td>
<td>辛格</td>
</tr>
<tr>
<td>童爱</td>
<td>美国</td>
<td>辛格</td>
</tr>
<tr>
<td>杜宾的传记</td>
<td>美国</td>
<td>马拉默德</td>
</tr>
<tr>
<td>洪堡的礼物</td>
<td>美国</td>
<td>贝娄</td>
</tr>
<tr>
<td>更多的人死于心碎</td>
<td>美国</td>
<td>贝娄</td>
</tr>
<tr>
<td>时震</td>
<td>美国</td>
<td>冯内古特</td>
</tr>
<tr>
<td>刽子手之歌</td>
<td>美国</td>
<td>梅勒</td>
</tr>
<tr>
<td>苏菲的抉择</td>
<td>美国</td>
<td>斯泰伦</td>
</tr>
<tr>
<td>情欲艺术家</td>
<td>美国</td>
<td>霍克斯</td>
</tr>
<tr>
<td>铁草</td>
<td>美国</td>
<td>肯尼迪</td>
</tr>
<tr>
<td>最蓝的眼睛</td>
<td>美国</td>
<td>莫里森</td>
</tr>
<tr>
<td>所罗门之歌</td>
<td>美国</td>
<td>莫里森</td>
</tr>
<tr>
<td>白雪公主后传</td>
<td>美国</td>
<td>巴塞尔姆</td>
</tr>
<tr>
<td>拉格泰姆时代</td>
<td>美国</td>
<td>多克特罗</td>
</tr>
<tr>
<td>兔子回家</td>
<td>美国</td>
<td>厄普代克</td>
</tr>
<tr>
<td>变形记</td>
<td>美国</td>
<td>厄普代克</td>
</tr>
<tr>
<td>反生活</td>
<td>美国</td>
<td>罗斯</td>
</tr>
<tr>
<td>人性的污点</td>
<td>美国</td>
<td>罗斯</td>
</tr>
<tr>
<td>遗产-一个真实的故事</td>
<td>美国</td>
<td>罗斯</td>
</tr>
<tr>
<td>骏马长嘶</td>
<td>美国</td>
<td>麦卡锡</td>
</tr>
<tr>
<td>孤独鸽</td>
<td>美国</td>
<td>麦克默特里</td>
</tr>
<tr>
<td>葡萄园</td>
<td>美国</td>
<td>品钦</td>
</tr>
<tr>
<td>幽灵之家</td>
<td>美国</td>
<td>阿连德</td>
</tr>
<tr>
<td>不规则飞行</td>
<td>美国</td>
<td>纳尔逊</td>
</tr>
<tr>
<td>紫色</td>
<td>美国</td>
<td>沃克</td>
</tr>
<tr>
<td>纽约女人未眠夜</td>
<td>美国</td>
<td>提尔曼</td>
</tr>
<tr>
<td>一千英亩</td>
<td>美国</td>
<td>斯迈利</td>
</tr>
<tr>
<td>时时刻刻</td>
<td>美国</td>
<td>坎宁安</td>
</tr>
<tr>
<td>达·芬奇密码</td>
<td>美国</td>
<td>布朗</td>
</tr>
<tr>
<td>神圣的夜晚</td>
<td>摩洛哥</td>
<td>杰伦</td>
</tr>
<tr>
<td>帝国轶闻</td>
<td>墨西哥</td>
<td>帕索</td>
</tr>
<tr>
<td>七月的人民</td>
<td>南非</td>
<td>戈迪默</td>
</tr>
<tr>
<td>耻</td>
<td>南非</td>
<td>库切</td>
</tr>
<tr>
<td>修道院纪事</td>
<td>葡萄牙</td>
<td>萨拉马戈</td>
</tr>
<tr>
<td>失明症漫记</td>
<td>葡萄牙</td>
<td>萨拉马戈</td>
</tr>
<tr>
<td>失乐园</td>
<td>日本</td>
<td>渡边淳一</td>
</tr>
<tr>
<td><strong>挪威的森林</strong></td>
<td>日本</td>
<td>村上春树</td>
</tr>
<tr>
<td>无限近似于透明的蓝</td>
<td>日本</td>
<td>村上龙</td>
</tr>
<tr>
<td>厨房</td>
<td>日本</td>
<td>吉本芭娜娜</td>
</tr>
<tr>
<td>印第安的最后夏天</td>
<td>瑞士</td>
<td>谢赛克斯</td>
</tr>
<tr>
<td>哈扎尔辞典</td>
<td>塞尔维亚</td>
<td>帕维奇</td>
</tr>
<tr>
<td>老人</td>
<td>苏联</td>
<td>特里丰诺夫</td>
</tr>
<tr>
<td>红莓</td>
<td>苏联</td>
<td>舒克申</td>
</tr>
<tr>
<td>我的名字叫红</td>
<td>土耳其</td>
<td>帕慕克</td>
</tr>
<tr>
<td>独裁者的葬礼</td>
<td>委内瑞拉</td>
<td>彼特里</td>
</tr>
<tr>
<td>请听清风倾诉</td>
<td>乌拉圭</td>
<td>奥内蒂</td>
</tr>
<tr>
<td>为亡灵弹奏</td>
<td>西班牙</td>
<td>塞拉</td>
</tr>
<tr>
<td>无命运的人生</td>
<td>匈牙利</td>
<td>凯尔泰斯</td>
</tr>
<tr>
<td>蓝山</td>
<td>以色列</td>
<td>沙莱夫</td>
</tr>
<tr>
<td>玫瑰的名字</td>
<td>意大利</td>
<td>埃科</td>
</tr>
<tr>
<td>阿纳泰的贝壳</td>
<td>意大利</td>
<td>斯戈隆</td>
</tr>
<tr>
<td>人性的因素</td>
<td>英国</td>
<td>格林</td>
</tr>
<tr>
<td>河湾</td>
<td>英国</td>
<td>奈保尔</td>
</tr>
<tr>
<td>抵达之谜</td>
<td>英国</td>
<td>奈保尔</td>
</tr>
<tr>
<td>来自无人地带的明信片</td>
<td>英国</td>
<td>钱伯斯</td>
</tr>
<tr>
<td>隐之书</td>
<td>英国</td>
<td>拜厄特</td>
</tr>
<tr>
<td>时间中的孩子</td>
<td>英国</td>
<td>麦克尤恩</td>
</tr>
<tr>
<td>化学</td>
<td>英国</td>
<td>斯威夫特</td>
</tr>
<tr>
<td>长日留痕</td>
<td>英国</td>
<td>石黑一雄</td>
</tr>
<tr>
<td>卑微的神灵</td>
<td>印度</td>
<td>罗易</td>
</tr>
<tr>
<td>夜阑更深</td>
<td>印度尼西亚</td>
<td>维查雅</td>
</tr>
<tr>
<td>人世间</td>
<td>印度尼西亚</td>
<td>普拉姆迪亚</td>
</tr>
<tr>
<td>旁边的花园</td>
<td>智利</td>
<td>多诺索</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 脚本自动重载</title>
    <url>/2018/03/09/python-reloader/</url>
    <content><![CDATA[<p>Django 和 Flask 应用开启 debug 模式之后都能检测代码的变化然后自动重载，于是去找实现代码，发现 Flask 是用的 werkzeug 库里面的功能，而 Django 的不好用于自己写的脚本，因为和 Django 应用结合了。</p>
<a id="more"></a>

<!-- toc -->

<p>下面是 <code>werkzeug</code> 中的 <code>_reloader</code> 模块中的 <code>run_with_reloader</code> 函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_reloader</span><span class="params">(main_func, extra_files=None, interval=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      reloader_type=<span class="string">'auto'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Run the given function in an independent python interpreter."""</span></span><br><span class="line">    <span class="keyword">import</span> signal</span><br><span class="line">    reloader = reloader_loops[reloader_type](extra_files, interval)</span><br><span class="line">    signal.signal(signal.SIGTERM, <span class="keyword">lambda</span> *args: sys.exit(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.environ.get(<span class="string">'WERKZEUG_RUN_MAIN'</span>) == <span class="string">'true'</span>:</span><br><span class="line">            t = threading.Thread(target=main_func, args=())</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">            reloader.run()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.exit(reloader.restart_with_reloader())</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"hello, world!"</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_with_reloader(main)</span><br></pre></td></tr></table></figure>

<p>但是执行函数不能传参，修改 <code>run_with_reloader</code> 如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_reloader</span><span class="params">(main_func, args=<span class="params">()</span>, kwargs=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                      extra_files=None, interval=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      reloader_type=<span class="string">'auto'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Run the given function in an independent python interpreter."""</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> signal</span><br><span class="line">    <span class="keyword">import</span> threading</span><br><span class="line">    <span class="keyword">from</span> werkzeug._reloader <span class="keyword">import</span> reloader_loops</span><br><span class="line">    reloader = reloader_loops[reloader_type](extra_files, interval)</span><br><span class="line">    signal.signal(signal.SIGTERM, <span class="keyword">lambda</span> *args: sys.exit(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.environ.get(<span class="string">'WERKZEUG_RUN_MAIN'</span>) == <span class="string">'true'</span>:</span><br><span class="line">            t = threading.Thread(target=main_func, args=args, kwargs=kwargs)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">            reloader.run()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.exit(reloader.restart_with_reloader())</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>然后就能传参了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(name, age)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"hello, "</span>, name, <span class="string">'!'</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_with_reloader(main, args=(<span class="string">'foo'</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 通过 Thrift 操作 Hbase</title>
    <url>/2018/11/14/hbase-thrift/</url>
    <content><![CDATA[<!-- toc -->

<p>记录 <code>Python</code> 通过 <code>Thrift</code> 操作 <code>Hbase</code> 的通用操作方法。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> hbase <span class="keyword">import</span> Hbase</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to HBase Thrift server</span></span><br><span class="line">transport = TTransport.TBufferedTransport(TSocket.TSocket(<span class="string">'localhost'</span>, <span class="number">9090</span>))</span><br><span class="line">protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create and open the client connection</span></span><br><span class="line">client = Hbase.Client(protocol)</span><br><span class="line">transport.open()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Elasticsearch server</span></span><br><span class="line">es = Elasticsearch(<span class="string">'localhost'</span>,</span><br><span class="line">                   http_auth=(<span class="string">'username'</span>, <span class="string">'password'</span>), port=<span class="string">'9200'</span>,</span><br><span class="line">                   timeout=<span class="number">30</span>, max_retries=<span class="number">10</span>, retry_on_timeout=<span class="literal">True</span></span><br><span class="line">                   )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span><span class="params">(index, doc_type, body, size=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""查询es获取第一条匹配的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        index &#123;str&#125; -- 索引</span></span><br><span class="line"><span class="string">        doc_type &#123;str&#125; -- 类型</span></span><br><span class="line"><span class="string">        body &#123;dict&#125; -- 查询语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Keyword Arguments:</span></span><br><span class="line"><span class="string">        size &#123;int&#125; -- 返回数量 (default: &#123;1&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict -- 一条数据，没有结果返回 None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    res = es.search(index=index, doc_type=doc_type,</span><br><span class="line">                    scroll=<span class="string">'2m'</span>, body=body,</span><br><span class="line">                    size=size)</span><br><span class="line">    hits = res[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</span><br><span class="line">    <span class="keyword">return</span> hits[<span class="number">0</span>] <span class="keyword">if</span> hits <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span><span class="params">(index, doc_type, body, size=<span class="number">100</span>)</span>:</span></span><br><span class="line">    <span class="string">"""查询es获取所有匹配的结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        index &#123;str&#125; -- 索引</span></span><br><span class="line"><span class="string">        doc_type &#123;str&#125; -- 类型</span></span><br><span class="line"><span class="string">        body &#123;dict&#125; -- 查询语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Keyword Arguments:</span></span><br><span class="line"><span class="string">        size &#123;int&#125; -- 返回数量 (default: &#123;100&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        list -- 结果集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    res = es.search(index=index, doc_type=doc_type,</span><br><span class="line">                    scroll=<span class="string">'2m'</span>, body=body,</span><br><span class="line">                    size=size)</span><br><span class="line">    <span class="keyword">return</span> res[<span class="string">'hits'</span>][<span class="string">'hits'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_term</span><span class="params">(field, value)</span>:</span></span><br><span class="line">    <span class="string">"""term</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        field &#123;str&#125; -- 字段</span></span><br><span class="line"><span class="string">        value &#123;str&#125; -- 值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict -- 查询语句</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">"query"</span>: &#123;</span><br><span class="line">            <span class="string">"term"</span>: &#123;</span><br><span class="line">                field: &#123;</span><br><span class="line">                    <span class="string">"value"</span>: value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_terms</span><span class="params">(field, values)</span>:</span></span><br><span class="line">    <span class="string">"""terms</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        field &#123;str&#125; -- 字段</span></span><br><span class="line"><span class="string">        values &#123;list&#125; -- 列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict -- 查询语句</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    body = &#123;</span><br><span class="line">        <span class="string">"query"</span>: &#123;</span><br><span class="line">            <span class="string">"terms"</span>: &#123;</span><br><span class="line">                field: values</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_row_with_columns</span><span class="params">(table_name, rowkey, columns)</span>:</span></span><br><span class="line">    <span class="string">"""根据 rowkey 从 hbase 获取一条数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        table_name &#123;str&#125; -- 表名</span></span><br><span class="line"><span class="string">        rowkey &#123;str&#125; -- rowkey</span></span><br><span class="line"><span class="string">        attributes &#123;list&#125; -- 属性列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        dict -- 一条数据，没有则返回None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    table_name = table_name.encode()</span><br><span class="line">    rowkey = rowkey.encode()</span><br><span class="line">    columns = [(<span class="string">'0:'</span> + c).encode() <span class="keyword">for</span> c <span class="keyword">in</span> columns]</span><br><span class="line">    res = client.getRowWithColumns(table_name, rowkey, columns, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    d = &#123;</span><br><span class="line">        k.decode().split(<span class="string">':'</span>)[<span class="number">1</span>]: v.value.decode()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> res[<span class="number">0</span>].columns.items()</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="string">'rowkey'</span>] = res[<span class="number">0</span>].row.decode()</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rows_with_columns</span><span class="params">(table_name, rowkeys, columns)</span>:</span></span><br><span class="line">    <span class="string">"""根据 rowkeys 从 hbase 获取所有匹配的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        table_name &#123;str&#125; -- 表名</span></span><br><span class="line"><span class="string">        rowkeys &#123;list&#125; -- rowkey 列表</span></span><br><span class="line"><span class="string">        columns &#123;list&#125; -- 指定返回字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        list -- 数据结果集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data = []</span><br><span class="line">    table_name = table_name.encode()</span><br><span class="line">    rowkeys = [k.encode() <span class="keyword">for</span> k <span class="keyword">in</span> rowkeys]</span><br><span class="line">    columns = [(<span class="string">'0:'</span> + c).encode() <span class="keyword">for</span> c <span class="keyword">in</span> columns]</span><br><span class="line">    res = client.getRowsWithColumns(table_name, rowkeys, columns, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        d = &#123;</span><br><span class="line">            k.decode().split(<span class="string">':'</span>)[<span class="number">1</span>]: v.value.decode()</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> r.columns.items()</span><br><span class="line">        &#125;</span><br><span class="line">        d[<span class="string">'rowkey'</span>] = r.row.decode()</span><br><span class="line">        data.append(d)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Screen 用法</title>
    <url>/2018/03/13/screen-usage/</url>
    <content><![CDATA[<p>GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="安装-screen"><a href="#安装-screen" class="headerlink" title="安装 screen"></a>安装 <code>screen</code></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y screen</span><br></pre></td></tr></table></figure>

<h2 id="screen-常用命令"><a href="#screen-常用命令" class="headerlink" title="screen 常用命令"></a><code>screen</code> 常用命令</h2><p>新建一个Screen Session</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -S session_name</span><br></pre></td></tr></table></figure>

<p>将当前Screen Session放到后台</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CTRL + A + D</span><br></pre></td></tr></table></figure>

<p>唤起一个Screen Session</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -r session_name</span><br></pre></td></tr></table></figure>

<p>分享一个Screen Session</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -x session_name</span><br></pre></td></tr></table></figure>

<p>终止一个Screen Session</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">or</span><br><span class="line">CTRL + D</span><br></pre></td></tr></table></figure>

<p>默认显示一屏的内容，要查看之前内容，如下操作：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Ctrl + A ESC</span><br></pre></td></tr></table></figure>

<p>列表所有的会话</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure>

<p>进入某个会话</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -r session_name</span><br></pre></td></tr></table></figure>

<p>如果进不去，则</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -d session_name</span><br></pre></td></tr></table></figure>

<p>再</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -r session_name</span><br></pre></td></tr></table></figure>

<p><code>ctrl + A + N</code> 切换窗口</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium 在 Ubuntu 服务器上的使用</title>
    <url>/2018/08/13/selenium-linux/</url>
    <content><![CDATA[<h2 id="安装-chrome"><a href="#安装-chrome" class="headerlink" title="安装 chrome"></a>安装 chrome</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'</span> | sudo tee /etc/apt/sources.list.d/google-chrome.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<!-- toc -->

<h2 id="安装-chromedriver"><a href="#安装-chromedriver" class="headerlink" title="安装 chromedriver"></a>安装 chromedriver</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -N https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip</span><br><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line">chmod +x chromedriver</span><br><span class="line">cp chromedriver /usr/bin/</span><br></pre></td></tr></table></figure>

<h2 id="安装-Xvfb"><a href="#安装-Xvfb" class="headerlink" title="安装 Xvfb"></a>安装 Xvfb</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install xvfb gtk2-engines-pixbuf</span><br><span class="line">sudo apt-get -y install xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable</span><br><span class="line"><span class="comment"># 截图功能，可选</span></span><br><span class="line">sudo apt-get -y install imagemagick x11-apps</span><br><span class="line">Xvfb -ac :99 -screen 0 1280x1024x16 &amp; <span class="built_in">export</span> DISPLAY=:99</span><br></pre></td></tr></table></figure>

<h2 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">driver = webdriver.Chrome(chrome_options=chrome_options,executable_path=<span class="string">'/usr/bin/chromedriver'</span>)</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(driver.title)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><code>ubuntu server 18.04</code> 虽然内置 <code>python3</code> 版本，但是没有 <code>pip</code><br>在 <code>/etc/apt/sources.list</code> 添加下列源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deb http://cn.archive.ubuntu.com/ubuntu bionic main multiverse restricted universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu bionic-updates main multiverse restricted universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu bionic-security main multiverse restricted universe</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu bionic-proposed main multiverse restricted universe</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<h2 id="再用-pip-安装-selenium"><a href="#再用-pip-安装-selenium" class="headerlink" title="再用 pip 安装 selenium"></a>再用 <code>pip</code> 安装 <code>selenium</code></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlalchemy 基本用法</title>
    <url>/2019/05/12/sqlalchemy-usage/</url>
    <content><![CDATA[<p>Sqlalchemy 基本用法</p>
<a id="more"></a>

<!-- toc -->

<h2 id="通用导入"><a href="#通用导入" class="headerlink" title="通用导入"></a>通用导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session, sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, Boolean</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///test.db'</span>, echo=<span class="literal">True</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line">db_session = scoped_session(sessionmaker(bind=engine))</span><br><span class="line">Base.query = db_session.query_property()</span><br></pre></td></tr></table></figure>

<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'parent'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    child_id = Column(Integer, ForeignKey(<span class="string">'child.id'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'child'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    parent = relationship(<span class="string">'Parent'</span>, backref=<span class="string">'child'</span>, uselist=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the one side</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'parent'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    <span class="comment"># children = relationship("Child", back_populates="parent")</span></span><br><span class="line">    children = relationship(<span class="string">"Child"</span>, backref=<span class="string">"parent"</span>, lazy=<span class="string">"dynamic"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the many side</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'child'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'parent.id'</span>))</span><br><span class="line">    <span class="comment"># parent = relationship("Parent", back_populates="children")</span></span><br><span class="line">    <span class="comment"># parent = relationship("Parent", backref="children")</span></span><br></pre></td></tr></table></figure>

<h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the many side</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'parent'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    child_id = Column(Integer, ForeignKey(<span class="string">'child.id'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the one side</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'child'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    parents = relationship(<span class="string">'Parent'</span>, backref=<span class="string">'child'</span>, lazy=<span class="string">'dynamic'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'department'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    employees = relationship(</span><br><span class="line">        <span class="string">'Employee'</span>,</span><br><span class="line">        secondary=<span class="string">'department_employee_link'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'employee'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String)</span><br><span class="line">    hired_on = Column(</span><br><span class="line">        DateTime,</span><br><span class="line">        default=func.now())</span><br><span class="line">    departments = relationship(</span><br><span class="line">        <span class="string">'Department'</span>,</span><br><span class="line">        secondary=<span class="string">'department_employee_link'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepartmentEmployeeLink</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'department_employee_link'</span></span><br><span class="line">    department_id = Column(Integer, ForeignKey(<span class="string">'department.id'</span>),</span><br><span class="line">                           primary_key=<span class="literal">True</span>)</span><br><span class="line">    department = relationship(<span class="string">'Department'</span>)</span><br><span class="line">    employee_id = Column(Integer, ForeignKey(<span class="string">'employee.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    employee = relationship(<span class="string">'Employee'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="自身多对多"><a href="#自身多对多" class="headerlink" title="自身多对多"></a>自身多对多</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follow</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'me_follow_you'</span></span><br><span class="line"></span><br><span class="line">    me_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    me = relationship(<span class="string">'User'</span>, foreign_keys=[me_id])</span><br><span class="line">    you_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    you = relationship(<span class="string">'User'</span>, foreign_keys=[you_id])</span><br><span class="line">    created = Column(DateTime(timezone=<span class="literal">True</span>), default=datetime.utcnow)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line"></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stars=我关注的人 fans=我的粉丝</span></span><br><span class="line">    stars = relationship(<span class="string">'User'</span>,</span><br><span class="line">                         secondary=<span class="string">'me_follow_you'</span>,</span><br><span class="line">                         primaryjoin=<span class="string">'User.id==Follow.me_id'</span>,</span><br><span class="line">                         secondaryjoin=<span class="string">'User.id==Follow.you_id'</span>,</span><br><span class="line">                         backref=backref(<span class="string">'fans'</span>, lazy=<span class="string">'dynamic'</span>),</span><br><span class="line">                         lazy=<span class="string">'dynamic'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="自身一对一"><a href="#自身一对一" class="headerlink" title="自身一对一"></a>自身一对一</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'node'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    parent_id = Column(Integer, ForeignKey(<span class="string">'node.id'</span>))</span><br><span class="line">    data = Column(String(<span class="number">50</span>))</span><br><span class="line">    parent = relationship(<span class="string">"Node"</span>, remote_side=[id])</span><br></pre></td></tr></table></figure>

<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">    engine = create_engine(<span class="string">'sqlite:///test.db'</span>, echo=<span class="literal">True</span>)</span><br><span class="line">    Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>

<h2 id="backref-和-back-populates"><a href="#backref-和-back-populates" class="headerlink" title="backref 和 back_populates"></a><code>backref</code> 和 <code>back_populates</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Parent 下添加 `children = relationship(<span class="string">"Child"</span>, back_populates=<span class="string">"parent"</span>)`</span><br><span class="line"></span><br><span class="line">创建p1 = Parent()和c1 = Child()失败，原因是One <span class="keyword">or</span> more mappers failed to initialize，即back_populates必须在关系两端同时指定</span><br><span class="line"></span><br><span class="line">Parent下添加 `children = relationship(<span class="string">"Child"</span>, back_populates=<span class="string">"parent"</span>)`</span><br><span class="line">Child下添加 `parent = relationship(<span class="string">"Parent"</span>, back_populates=<span class="string">"children"</span>)`</span><br><span class="line"></span><br><span class="line">Parent Attribute:</span><br><span class="line">Parent.children Parent.id Parent.metadata Parent.name Parent.query</span><br><span class="line"></span><br><span class="line">Child Attribute:</span><br><span class="line">Child.id Child.metadata Child.name Child.parent Child.parent_id Child.query</span><br><span class="line"></span><br><span class="line">p1 = Parent()</span><br><span class="line">c1 = Child()</span><br><span class="line">c1.parent = p1 <span class="keyword">or</span> p1.children.append(c1)</span><br><span class="line"></span><br><span class="line">Parent下添加 `children = relationship(<span class="string">"Child"</span>, backref=<span class="string">"parent"</span>)`</span><br><span class="line"></span><br><span class="line">Parent Attribute:</span><br><span class="line">Parent.children Parent.id Parent.metadata Parent.name Parent.query</span><br><span class="line"></span><br><span class="line">Child Attribute:</span><br><span class="line">Child.id Child.metadata Child.name Child.parent_id Child.query</span><br><span class="line"></span><br><span class="line">p1 = Parent()</span><br><span class="line">c1 = Child()</span><br><span class="line">c1.parent = p1 <span class="keyword">or</span> p1.children.append(c1)</span><br><span class="line"></span><br><span class="line">可以看出使用backref时，实例化c1时会自动在c1对象上添加parent属性</span><br><span class="line"></span><br><span class="line">此后再检查:</span><br><span class="line">hasattr(Child, <span class="string">'parent'</span>) // <span class="literal">True</span></span><br><span class="line">hasattr(c1, <span class="string">'parent'</span>) // <span class="literal">True</span></span><br><span class="line">hasattr(Parent, <span class="string">'children'</span>) // <span class="literal">True</span></span><br><span class="line">hasattr(p1, <span class="string">'children'</span>) // <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">Child 下添加 `parent = relationship(<span class="string">"Parent"</span>, backref=<span class="string">"children"</span>)` 情况和 <span class="number">3</span> 相同</span><br><span class="line">Parent下添加 `children = relationship(<span class="string">"Child"</span>, backref=<span class="string">"parent"</span>)`</span><br><span class="line">Child下添加 `parent = relationship(<span class="string">"Parent"</span>, backref=<span class="string">"children"</span>)`</span><br><span class="line"></span><br><span class="line">创建p1 = Parent()和c1 = Child()失败，原因是One <span class="keyword">or</span> more mappers failed to initialize</span><br><span class="line">因此两者只能使用其中之一</span><br><span class="line"></span><br><span class="line">lazy 指定如何加载相关记录，默认值是<span class="string">"select"</span></span><br><span class="line">    select 首次访问时按需加载</span><br><span class="line">    immediate 源对象加载后就加载</span><br><span class="line">    joined 加载记录,但使用联结</span><br><span class="line">    subquery 立即加载,但使用子查询</span><br><span class="line">    noload 永不加载</span><br><span class="line">    dynamic 不加载记录,但提供加载记录的查询</span><br><span class="line"></span><br><span class="line">lazy = <span class="string">"dynamic"</span>只能用于collections，不立即查询出结果集，而是提供一系列结果集的方法，可以基于结果集再次进行更精确的查找</span><br></pre></td></tr></table></figure>

<h2 id="default-和-server-default"><a href="#default-和-server-default" class="headerlink" title="default 和 server_default"></a>default 和 server_default</h2><ol>
<li>default 是在 ORM 层设置默认值，server_default 是在表结构上设置默认值</li>
<li>onupdate 在 ORM 层生效，server_onupdate 在数据库生效，在 MySQL 上 ON UPDATE 是MySQL在背后创建了 trigger，而在 PostgreSQL 上你必须手动创建 trigger</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func, sql, text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'records</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    id = Column(Integer, primary_key=True)</span></span><br><span class="line"><span class="string">    name = Column(String(64), server_default=text('</span>name<span class="string">'))</span></span><br><span class="line"><span class="string">    created = Column(DateTime(timezone=True), default=datetime.utcnow)</span></span><br><span class="line"><span class="string">    # created = Column(DateTime(timezone=True), server_default=func.now())</span></span><br><span class="line"><span class="string">    # created = Column(DateTime(timezone=True), server_default=func.current_timestamp())</span></span><br><span class="line"><span class="string">    updated = Column(DateTime(timezone=True), server_default=func.current_timestamp(), onupdate=func.current_timestamp())</span></span><br><span class="line"><span class="string">    deleted = Column(Boolean, default=False)</span></span><br><span class="line"><span class="string">    # deleted = Column(Boolean, server_default=sql.expression.false())</span></span><br></pre></td></tr></table></figure>

<h2 id="为flask-sqlalchemy扩展BaseQuery方法"><a href="#为flask-sqlalchemy扩展BaseQuery方法" class="headerlink" title="为flask_sqlalchemy扩展BaseQuery方法"></a>为flask_sqlalchemy扩展BaseQuery方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy, BaseQuery</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomQuery</span><span class="params">(BaseQuery)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_all</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.with_entities(func.count()).scalar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(query_class=CustomQuery)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2019/01/15/treenode/</url>
    <content><![CDATA[<p><code>LeetCode</code> 二叉树题解汇总</p>
<a id="more"></a>

<!-- toc -->

<h2 id="二叉树定义"><a href="#二叉树定义" class="headerlink" title="二叉树定义"></a>二叉树定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h2 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_same_tree</span><span class="params">(p, q)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">not</span> q</span><br><span class="line">      <span class="keyword">if</span> q <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">not</span> p</span><br><span class="line">      <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> is_same_tree(p.left, q.left) <span class="keyword">and</span> is_same_tree(p.right, q.right)</span><br></pre></td></tr></table></figure>

<h2 id="对称的树"><a href="#对称的树" class="headerlink" title="对称的树"></a>对称的树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_symmetric</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> symmetric(root.left, root.right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">symmetric</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> l2</span><br><span class="line">    <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> l1</span><br><span class="line">    <span class="keyword">return</span> l1.val == l2.val <span class="keyword">and</span> symmetric(l1.left, l2.right) <span class="keyword">and</span> symmetric(l1.right, l2.left)</span><br></pre></td></tr></table></figure>

<h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>给定一个二叉树，返回其按层次遍历的节点值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(node, level, res)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> len(res) &lt; level:</span><br><span class="line">        res.append([])</span><br><span class="line">    res[level - <span class="number">1</span>].append(node.val)</span><br><span class="line">    add(node.left, level + <span class="number">1</span>, res)</span><br><span class="line">    add(node.right, level + <span class="number">1</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span><span class="params">(root)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    add(root, <span class="number">1</span>, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="最大深度"><a href="#最大深度" class="headerlink" title="最大深度"></a>最大深度</h2><p>给定一个二叉树，找出其最大深度。</p>
<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_depth</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + max(map(max_depth, (root.left, root.right))) <span class="keyword">if</span> root <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="最小深度"><a href="#最小深度" class="headerlink" title="最小深度"></a>最小深度</h2><p>给定一个二叉树，找出其最小深度。</p>
<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_depth</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + min_depth(root.right)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + min_depth(root.left)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + min(map(min_depth, (root.left, root.right)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更简洁的写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_depth</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    depth_under_root = map(min_depth, (root.left, root.right))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + (min(depth_under_root) <span class="keyword">or</span> max(depth_under_root))</span><br></pre></td></tr></table></figure>

<h2 id="将有序数组转化为二叉树"><a href="#将有序数组转化为二叉树" class="headerlink" title="将有序数组转化为二叉树"></a>将有序数组转化为二叉树</h2><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p>
<p>高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sorted_array_to_balanced_tree</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    mid = len(nums) // <span class="number">2</span></span><br><span class="line">    root = TreeNode(nums[mid])</span><br><span class="line">    root.left = sorted_array_to_balanced_tree(nums[:mid])</span><br><span class="line">    root.right = sorted_array_to_balanced_tree(nums[mid + <span class="number">1</span>:])</span><br></pre></td></tr></table></figure>

<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>一个二叉树每个节点的左右两个子树的高度差的绝对值不超过1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hight</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + max(map(hight, (node.left, node.right)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_balanced</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> abs(hight(root.left) - hight(root.right)) &lt;= <span class="number">1</span> <span class="keyword">and</span> is_balanced(root.left) <span class="keyword">and</span> is_balanced(root.right)</span><br></pre></td></tr></table></figure>

<h2 id="路径总和"><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_path_sum</span><span class="params">(root, sums)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">or</span> root.right:</span><br><span class="line">        <span class="keyword">return</span> has_path_sum(root.left, sums - root.val) <span class="keyword">or</span> has_path_sum(root.right, sums - root.val)</span><br><span class="line">    <span class="keyword">return</span> sums == root.val</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask v0.1 源码阅读</title>
    <url>/2018/09/27/understand-flask-v01/</url>
    <content><![CDATA[<p><a href="https://github.com/pallets/flask/tree/0.1" target="_blank" rel="noopener">flask v0.1</a> 是第一个发布的版本，单文件版，v0.4 是 flask 的最后一个单文件版本，文章中 flask 的源码有修改，因为依赖包有更新。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="导包部分"><a href="#导包部分" class="headerlink" title="导包部分"></a>导包部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2.5 版本加入 with 语句，低于 2.5 需要引入，高于则忽略。</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有用到</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br><span class="line"></span><br><span class="line"><span class="comment"># jinja2 模板引擎</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, PackageLoader, FileSystemLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flask 的 Request 和 Response 继承自 werkzeug 的 Request 和 Response</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request <span class="keyword">as</span> RequestBase, Response <span class="keyword">as</span> ResponseBase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后几行 _request_ctx_stack, current_app, request, session, g 用到。</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack, LocalProxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于测试请求上下文，在 Flask 类的方法 test_request_context 中调用，已失效。</span></span><br><span class="line"><span class="comment"># 最新版 test_request_context 方法调用 flask.testing 的 make_test_environ_builder，最终调用 werkzeug.test 的 EnvironBuilder。</span></span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> create_environ</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> cached_property</span><br><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> SharedDataMiddleware</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> Map, Rule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误处理</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.exceptions <span class="keyword">import</span> HTTPException, InternalServerError</span><br><span class="line"></span><br><span class="line"><span class="comment"># flask 自带的 session 用到</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.contrib.securecookie <span class="keyword">import</span> SecureCookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有用到，作为对外接口</span></span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> abort, redirect</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Markup, escape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于获取应用程序根目录</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> pkg_resources</span><br><span class="line">    pkg_resources.resource_stream</span><br><span class="line"><span class="keyword">except</span> (ImportError, AttributeError):</span><br><span class="line">    pkg_resources = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h2 id="Request-和-Response"><a href="#Request-和-Response" class="headerlink" title="Request 和 Response"></a><code>Request</code> 和 <code>Response</code></h2><p><code>flask</code> 的 <code>Request</code> 和 <code>Response</code> 继承自 <code>werkzeug</code> 的 <code>Request</code> 和 <code>Response</code>。</p>
<p>如果你想要自定义 <code>Request</code> 和 <code>Response</code>，你可以继承这两个类，然后指定 <code>Flask</code> 的 <code>request_class</code> 和 <code>response_class</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(RequestBase)</span>:</span></span><br><span class="line">    <span class="string">"""请求类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        RequestBase.__init__(self, environ)  <span class="comment"># WSGI 环境</span></span><br><span class="line">        self.endpoint = <span class="literal">None</span>  <span class="comment"># 视图函数的键名</span></span><br><span class="line">        self.view_args = <span class="literal">None</span>  <span class="comment"># 视图函数的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(ResponseBase)</span>:</span></span><br><span class="line">    <span class="string">"""响应类"""</span></span><br><span class="line"></span><br><span class="line">    default_mimetype = <span class="string">'text/html'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RequestGlobals</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""请求上下文"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        self.url_adapter = app.url_map.bind_to_environ(environ)</span><br><span class="line">        self.request = app.request_class(environ)</span><br><span class="line">        self.session = app.open_session(self.request)  <span class="comment"># 带上下文的 session</span></span><br><span class="line">        self.g = _RequestGlobals()  <span class="comment"># 带上下文的 g</span></span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        _request_ctx_stack.push(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tb <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> self.app.debug:</span><br><span class="line">            _request_ctx_stack.pop()</span><br></pre></td></tr></table></figure>

<h2 id="几个有用的函数"><a href="#几个有用的函数" class="headerlink" title="几个有用的函数"></a>几个有用的函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url_for</span><span class="params">(endpoint, **values)</span>:</span></span><br><span class="line">    <span class="string">"""函数跳转</span></span><br><span class="line"><span class="string">    endpoint: Flask 类有个 view_functions 字典，存储的就是 endpoint 和 视图函数的映射关系，默认 endpoint 是视图函数的名字</span></span><br><span class="line"><span class="string">    values: 路由传过来的参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> _request_ctx_stack.top.url_adapter.build(endpoint, values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flash</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    消息闪现，存储在 session 中，是个列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    session[<span class="string">'_flashes'</span>] = (session.get(<span class="string">'_flashes'</span>, [])) + [message]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flashed_messages</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    把 session 中存储的消息全部 pop 出来并返回</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    flashes = _request_ctx_stack.top.flashes</span><br><span class="line">    <span class="keyword">if</span> flashes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _request_ctx_stack.top.flashes = flashes = \</span><br><span class="line">            session.pop(<span class="string">'_flashes'</span>, [])</span><br><span class="line">    <span class="keyword">return</span> flashes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_template</span><span class="params">(template_name, **context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从文件渲染模板</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    current_app.update_template_context(context)</span><br><span class="line">    <span class="keyword">return</span> current_app.jinja_env.get_template(template_name).render(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_template_string</span><span class="params">(source, **context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从字符串渲染模板</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    current_app.update_template_context(context)</span><br><span class="line">    <span class="keyword">return</span> current_app.jinja_env.from_string(source).render(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_default_template_ctx_processor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    模板处理，使得在所有模板中可以使用 request, session 和 g 三个全局变量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    reqctx = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">return</span> dict(</span><br><span class="line">        request=reqctx.request,</span><br><span class="line">        session=reqctx.session,</span><br><span class="line">        g=reqctx.g</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_package_path</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">"""根据名字获取模块的路径"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> os.path.abspath(os.path.dirname(sys.modules[name].__file__))</span><br><span class="line">    <span class="keyword">except</span> (KeyError, AttributeError):</span><br><span class="line">        <span class="keyword">return</span> os.getcwd()</span><br></pre></td></tr></table></figure>

<h2 id="Flask-类"><a href="#Flask-类" class="headerlink" title="Flask 类"></a><code>Flask</code> 类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Flask 类实现了一个 WSGI 应用，只要将包或者模块的名字传递给它</span></span><br><span class="line"><span class="string">    一旦创建的时候，它将首先注册视图函数、路由映射、模板配置等等几个重要的对象</span></span><br><span class="line"><span class="string">    传入包的名字是用于解决应用内部资源的引用，具体请查看 open_resource 函数</span></span><br><span class="line"><span class="string">    一般情况下，你只需要这样创建：</span></span><br><span class="line"><span class="string">        from flask import Flask</span></span><br><span class="line"><span class="string">        app = Flask(__name__)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求类</span></span><br><span class="line">    request_class = Request</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应类</span></span><br><span class="line">    response_class = Response</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态文件路径，设置为 None 可以禁用</span></span><br><span class="line">    static_path = <span class="string">'/static'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密钥，用于 cookies 签名验证</span></span><br><span class="line">    secret_key = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基于 cookie 的 session 的名字</span></span><br><span class="line">    session_cookie_name = <span class="string">'session'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认会直接传给 jinja2 的 options 参数值</span></span><br><span class="line">    jinja_options = dict(</span><br><span class="line">        autoescape=<span class="literal">True</span>,</span><br><span class="line">        extensions=[<span class="string">'jinja2.ext.autoescape'</span>, <span class="string">'jinja2.ext.with_'</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, package_name)</span>:</span></span><br><span class="line">        <span class="comment"># 调试模式开关，设置 True 以打开调试模式</span></span><br><span class="line">        <span class="comment"># 在调试模式下，应用程序出错会有特殊的错误页面以供调试</span></span><br><span class="line">        <span class="comment"># 并且服务会监控文件的变化，文件发生变化会重载服务</span></span><br><span class="line">        self.debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 包或者模块的名字，一旦设置好了就不要改动</span></span><br><span class="line">        self.package_name = package_name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 应用程序顶级目录</span></span><br><span class="line">        self.root_path = _get_package_path(self.package_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 包含所有注册好的视图函数字典，键是函数的名字，也用于生成 URL</span></span><br><span class="line">        <span class="comment"># 值就是函数本身，可以用 route 装饰器注册一个函数</span></span><br><span class="line">        self.view_functions = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 所有注册好的错误处理函数，键是错误代码，值是处理函数</span></span><br><span class="line">        <span class="comment"># 可以用 errorhandler 注册一个错误处理函数</span></span><br><span class="line">        self.error_handlers = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 预处理函数，每次请求之前会执行，用 before_request 装饰器注册</span></span><br><span class="line">        self.before_request_funcs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 后处理函数，每次请求完成以后执行，函数会截获响应并且改变它</span></span><br><span class="line">        <span class="comment"># 用 after_request 装饰器注册</span></span><br><span class="line">        self.after_request_funcs = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 模板上下文处理器，默认有一个处理函数 _default_template_ctx_processor</span></span><br><span class="line">        <span class="comment"># 默认的函数功能是向模板上下文添加三个对象 request, session, g</span></span><br><span class="line">        <span class="comment"># 每个函数执行不需要参数，返回值为字典，用于填充模板上下文</span></span><br><span class="line">        self.template_context_processors = [_default_template_ctx_processor]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 路由映射，在 werkzeug.routing.Map</span></span><br><span class="line">        self.url_map = Map()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 架起一个静态资源服务，一般用于开发环境，生产环境用 nginx</span></span><br><span class="line">        <span class="keyword">if</span> self.static_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.url_map.add(Rule(self.static_path + <span class="string">'/&lt;filename&gt;'</span>,</span><br><span class="line">                                  build_only=<span class="literal">True</span>, endpoint=<span class="string">'static'</span>))</span><br><span class="line">            <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                target = (self.package_name, <span class="string">'static'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                target = os.path.join(self.root_path, <span class="string">'static'</span>)</span><br><span class="line">            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, &#123;</span><br><span class="line">                self.static_path: target</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># jinja2 模板配置，包括模板目录和默认开启的功能</span></span><br><span class="line">        self.jinja_env = Environment(loader=self.create_jinja_loader(),</span><br><span class="line">                                     **self.jinja_options)</span><br><span class="line">        <span class="comment"># 这是两个模板能用到的函数</span></span><br><span class="line">        <span class="comment"># url_for 用于根据 endpoint 获取 URL</span></span><br><span class="line">        <span class="comment"># get_flashed_messages 用于获取消息闪现</span></span><br><span class="line">        self.jinja_env.globals.update(</span><br><span class="line">            url_for=url_for,</span><br><span class="line">            get_flashed_messages=get_flashed_messages</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_jinja_loader</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        加载模板目录，默认目录为 templates</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> FileSystemLoader(os.path.join(self.root_path, <span class="string">'templates'</span>))</span><br><span class="line">        <span class="keyword">return</span> PackageLoader(self.package_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_template_context</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        为模板上下文注入几个常用的变量，比如 request, session, g</span></span><br><span class="line"><span class="string">        context 为填充模板上下文的字典</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        reqctx = _request_ctx_stack.top</span><br><span class="line">        <span class="keyword">for</span> func <span class="keyword">in</span> self.template_context_processors:</span><br><span class="line">            context.update(func())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, host=<span class="string">'localhost'</span>, port=<span class="number">5000</span>, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        运行开发服务器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">from</span> werkzeug <span class="keyword">import</span> run_simple</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'debug'</span> <span class="keyword">in</span> options:</span><br><span class="line">            self.debug = options.pop(<span class="string">'debug'</span>)</span><br><span class="line">        options.setdefault(<span class="string">'use_reloader'</span>, self.debug)</span><br><span class="line">        options.setdefault(<span class="string">'use_debugger'</span>, self.debug)</span><br><span class="line">        <span class="keyword">return</span> run_simple(host, port, self, **options)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_client</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        为应用程序创建一个测试客户端</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">from</span> werkzeug <span class="keyword">import</span> Client</span><br><span class="line">        <span class="keyword">return</span> Client(self, self.response_class, use_cookies=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_resource</span><span class="params">(self, resource)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        动态加载模块</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> open(os.path.join(self.root_path, resource), <span class="string">'rb'</span>)</span><br><span class="line">        <span class="keyword">return</span> pkg_resources.resource_stream(self.package_name, resource)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建一个 session，secret_key 必须设置</span></span><br><span class="line"><span class="string">        基于 werkzeug.contrib.securecookie.SecureCookie</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.secret_key</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> SecureCookie.load_cookie(request, self.session_cookie_name,</span><br><span class="line">                                            secret_key=key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, session, response)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        保存 session</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            session.save_cookie(response, self.session_cookie_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span><span class="params">(self, rule, endpoint, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建 URL 和视图函数的映射规则，等同于 route 装饰器</span></span><br><span class="line"><span class="string">        只是 add_url_rule 并没有为视图函数注册一个 endpoint</span></span><br><span class="line"><span class="string">        这一步也就是向 view_functions 字典添加 endpoint: view_func 键值对</span></span><br><span class="line"><span class="string">        以下：</span></span><br><span class="line"><span class="string">            @app.route('/')</span></span><br><span class="line"><span class="string">            def index():</span></span><br><span class="line"><span class="string">                pass</span></span><br><span class="line"><span class="string">        等同于：</span></span><br><span class="line"><span class="string">            def index():</span></span><br><span class="line"><span class="string">                pass</span></span><br><span class="line"><span class="string">            app.add_url_rule('index', '/')</span></span><br><span class="line"><span class="string">            app.view_functions['index'] = index</span></span><br><span class="line"><span class="string">        options: 参数选项详见 werkzeug.routing.Rule</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        options[<span class="string">'endpoint'</span>] = endpoint</span><br><span class="line">        options.setdefault(<span class="string">'methods'</span>, (<span class="string">'GET'</span>,))</span><br><span class="line">        self.url_map.add(Rule(rule, **options))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, rule, **options)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        为给定的 URL 注册一个视图函数</span></span><br><span class="line"><span class="string">        用法：</span></span><br><span class="line"><span class="string">            @app.route('/')</span></span><br><span class="line"><span class="string">            def index():</span></span><br><span class="line"><span class="string">                return 'Hello World'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        变量部分可以用尖括号(``/user/&lt;username&gt;``)指定，默认接受任何不带斜杆的字符串</span></span><br><span class="line"><span class="string">        变量也可以指定一个转换器，以指定类型的参数：</span></span><br><span class="line"><span class="string">        =========== ===========================================</span></span><br><span class="line"><span class="string">        int         整数</span></span><br><span class="line"><span class="string">        float       浮点数</span></span><br><span class="line"><span class="string">        path        路径</span></span><br><span class="line"><span class="string">        =========== ===========================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        值得注意的是 Flask 如何处理结尾的斜杆，核心思路是保证每个 URL 唯一：</span></span><br><span class="line"><span class="string">            1、如果配置了一个带结尾斜杆的 URL，用户请求不带结尾斜杆的这个 URL，则跳转到带结尾斜杆的页面。</span></span><br><span class="line"><span class="string">            2、如果配置了一个不带结尾斜杆的 URL，用户请求带结尾斜杆的这个 URL，则触发404错误。</span></span><br><span class="line"><span class="string">        这和 web 服务器处理静态资源 static 的逻辑是一样的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        rule: URL 字符串</span></span><br><span class="line"><span class="string">        methods: 允许的请求方法，是个列表，默认只接受 GET 请求和隐式的 HEAD</span></span><br><span class="line"><span class="string">        subdomain: 指定子域名</span></span><br><span class="line"><span class="string">        strict_slashes: 上述对结尾斜杆处理的开关</span></span><br><span class="line"><span class="string">        options: 参数选项详见 `werkzeug.routing.Rule`</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">            self.add_url_rule(rule, f.__name__, **options)</span><br><span class="line">            self.view_functions[f.__name__] = f</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">errorhandler</span><span class="params">(self, code)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        注册一个错误码处理函数</span></span><br><span class="line"><span class="string">        用法：</span></span><br><span class="line"><span class="string">            @app.errorhandler(404)</span></span><br><span class="line"><span class="string">            def page_not_found():</span></span><br><span class="line"><span class="string">                return 'This page does not exist', 404</span></span><br><span class="line"><span class="string">        等同于：</span></span><br><span class="line"><span class="string">            def page_not_found():</span></span><br><span class="line"><span class="string">                return 'This page does not exist', 404</span></span><br><span class="line"><span class="string">            app.error_handlers[404] = page_not_found</span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">            code: 错误码</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">            self.error_handlers[code] = f</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        <span class="string">"""注册一个预处理函数"""</span></span><br><span class="line">        self.before_request_funcs.append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        <span class="string">"""注册一个后处理函数"""</span></span><br><span class="line">        self.after_request_funcs.append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context_processor</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        <span class="string">"""注册一个模板上下文处理函数"""</span></span><br><span class="line">        self.template_context_processors.append(f)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据当前请求的路由去和url_map匹配，拿到 enpoint 和 view_args</span></span><br><span class="line"><span class="string">        endpoint: 端点，是 view_functions 中对应视图函数的key</span></span><br><span class="line"><span class="string">        view_args: 视图函数的参数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        rv = _request_ctx_stack.top.url_adapter.match()</span><br><span class="line">        request.endpoint, request.view_args = rv</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        首先调用上面的 match_request 方法拿到 endpoint 和 view_args</span></span><br><span class="line"><span class="string">        根据 endpoint 可以从 view_functions 找到对应的视图函数</span></span><br><span class="line"><span class="string">        再传入视图函数的参数 view_args，并返回结果，这个结果只是函数的返回值</span></span><br><span class="line"><span class="string">        并没有包装成响应类 response_class，可以调用 make_response 方法生成响应</span></span><br><span class="line"><span class="string">        如果函数执行失败，则根据错误码调用对应的错误处理函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            endpoint, values = self.match_request()</span><br><span class="line">            <span class="keyword">return</span> self.view_functions[endpoint](**values)</span><br><span class="line">        <span class="keyword">except</span> HTTPException, e:</span><br><span class="line">            handler = self.error_handlers.get(e.code)</span><br><span class="line">            <span class="keyword">if</span> handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> e</span><br><span class="line">            <span class="keyword">return</span> handler(e)</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            handler = self.error_handlers.get(<span class="number">500</span>)</span><br><span class="line">            <span class="keyword">if</span> self.debug <span class="keyword">or</span> handler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> handler(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_response</span><span class="params">(self, rv)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将视图函数的返回值包装成一个真实的响应类 response_class</span></span><br><span class="line"><span class="string">        函数的返回值支持以下几种类型：</span></span><br><span class="line"><span class="string">        ======================= ===========================================</span></span><br><span class="line"><span class="string">        response_class:         响应类本身，原样返回</span></span><br><span class="line"><span class="string">        str:                    字符串，创建相应类并返回</span></span><br><span class="line"><span class="string">        unicode:                unicode 编码，utf-8编码后创建相应类并返回</span></span><br><span class="line"><span class="string">        tuple:                  元组，解包元组传入参数创建响应类并返回</span></span><br><span class="line"><span class="string">        a WSGI function:        WSGI 函数</span></span><br><span class="line"><span class="string">        ======================= ===========================================</span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        rv: 视图函数的返回值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(rv, self.response_class):</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        <span class="comment"># basestring 是 str 和 unicode 的超类，只支持 python2</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(rv, basestring):</span><br><span class="line">            <span class="keyword">return</span> self.response_class(rv)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(rv, tuple):</span><br><span class="line">            <span class="keyword">return</span> self.response_class(*rv)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.response_class.force_type(rv, request.environ)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在分发请求之前执行所有的预处理函数，如果预处理函数有返回值不为 None</span></span><br><span class="line"><span class="string">        则返回结果并中断其余的预处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> func <span class="keyword">in</span> self.before_request_funcs:</span><br><span class="line">            rv = func()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        依次传入响应并执行所有的后处理函数，返回新的响应</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        session = _request_ctx_stack.top.session</span><br><span class="line">        <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 保存 `session`</span></span><br><span class="line">            self.save_session(session, response)</span><br><span class="line">        <span class="keyword">for</span> handler <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">            response = handler(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        WSGI 应用，可以用中间件包装：</span></span><br><span class="line"><span class="string">            app.wsgi_app = MyMiddleware(app.wsgi_app)</span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        environ: WSGI 环境，是一个字典，包含了所有请求的信息</span></span><br><span class="line"><span class="string">        start_response: 回调函数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self.request_context(environ):</span><br><span class="line">            rv = self.preprocess_request()</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                rv = self.dispatch_request()</span><br><span class="line">            response = self.make_response(rv)</span><br><span class="line">            response = self.process_response(response)</span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_context</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        通过给定的 WSGI 环境创建一个请求上下文，并把它绑定到当前上下文中</span></span><br><span class="line"><span class="string">        必须通过 with 语句使用，因为 request 对象只在请求上下文</span></span><br><span class="line"><span class="string">        也就是 with 语句块中起作用</span></span><br><span class="line"><span class="string">        用法如下：</span></span><br><span class="line"><span class="string">            with app.request_context(environ):</span></span><br><span class="line"><span class="string">                do_something_with(request)</span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        environ: WSGI 环境</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> _RequestContext(self, environ)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_request_context</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        测试请求上下文，参数详见 werkzeug.create_environ</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.request_context(create_environ(*args, **kwargs))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        <span class="string">"""调用 wsgi_app 方法"""</span></span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure>

<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">current_app = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.app)</span><br><span class="line">request = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.request)</span><br><span class="line">session = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.session)</span><br><span class="line">g = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.g)</span><br></pre></td></tr></table></figure>

<h2 id="werkzeug-的-Local，LocalStack-和-LocalProxy"><a href="#werkzeug-的-Local，LocalStack-和-LocalProxy" class="headerlink" title="werkzeug 的 Local，LocalStack 和 LocalProxy"></a><code>werkzeug</code> 的 <code>Local</code>，<code>LocalStack</code> 和 <code>LocalProxy</code></h2><p><code>Flask</code> 中有两个上下文（<code>Context</code>）：</p>
<ol>
<li>应用上下文（<code>App Context</code>）</li>
<li>请求上下文（<code>Request Context</code>）</li>
</ol>
<p>上下文就是函数运行时所需要的外部变量，当我们运行一个简单的求和函数 <code>sum</code> 是不需要外部变量的，而像 <code>Flask</code> 中的视图函数运行需要知道当前的请求的路由、表单和请求方法等等一些信息。</p>
<p><code>Django</code> 和 <code>Tornado</code> 把视图函数所需要的外部信息封装成一个对象 <code>Request</code>，并把这个对象当作参数传给视图函数，无论视图函数有没有用到，所以编写 <code>Django</code> 的视图函数会到处都见到一个 <code>request</code> 参数。</p>
<p>而 <code>Flask</code> 则使用了类似 <code>Thread Local</code> 的对象，它可以隔离多线程/协程之间的状态，使得多线程/协程像操作一个全局变量一样操作各自的状态而互不影响，原理就是使用当前的线程ID作为命名空间，保存多份字典，每个线程只获取各自线程ID对应的字典。</p>
<p><code>Flask</code> 并没有使用 <code>Python</code> 标准库的 <code>Thread Local</code>，而是用了 <code>werkzeug</code> 实现的 <code>Local</code>。</p>
<p><code>Local</code> 和 <code>threading.local</code> 相似，但是 <code>Local</code> 在 <code>Greenlet</code> 可用的情况下优先使用 <code>getcurrent</code> 获取当前线程ID，用以支持 <code>Gevent</code> 调度。</p>
<p><code>Local</code> 还有一个 <code>__release_local__</code> 方法，用以释放当前线程存储的状态信息。</p>
<p><code>LocalStack</code> 是基于 <code>Local</code> 实现的栈结构，可以入栈（<code>push</code>）、出栈（<code>pop</code>）和获取栈顶对象（<code>top</code>）。</p>
<p><code>LocalProxy</code> 是作为 <code>Local</code> 的一个代理模式，它接受一个 <code>callable</code> 对象，注意参数不是 <code>Local</code> 实例，这个 <code>callable</code> 对象返回的结果才是 <code>Local</code> 实例，所有对于 <code>LocalProxy</code> 对象的操作都会转发到对应的 <code>Local</code>。 上</p>
<p>当 <code>app = Flask(__name__)</code> 实例化一个 <strong>Flask App</strong> 时，<code>App Context</code> 并没有立即被入栈，<code>LocalStack</code> 栈顶元素是空的，返回 <code>None</code> 值，<code>current_app</code>，<code>request</code>，<code>session</code> 和 <code>g</code> 也是 <code>unbound</code> 状态，此时使用这些对象会引发 <code>RuntimeError</code>，解决方法是手动将 <code>app.app_context()</code> 入栈。</p>
<p>当 <code>Flask</code> 应用被 <code>werkzeug</code> 自带的开发服务器或者 <code>gunicorn</code> 用于生产的这类 WSGI 服务器架起的时候，每一个请求进来之前会自动将请求上下文（<code>Request Context</code>）入栈。</p>
<p>应用上下文（<code>App Context</code>）在 flask v0.1 版本的源码中没有，后面版本引入，应用上下文也会自动入栈，后面待看。</p>
<p><code>threading.local</code> 使用：<br><img src="/images/threading-local.png" alt="threading.local"></p>
<p><code>Flask</code> 的 <code>App Context</code> 使用：<br><img src="/images/flask-app-context.png" alt="App Context"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优先使用 Greenlet 的线程ID</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 固定属性</span></span><br><span class="line">    __slots__ = (<span class="string">'__storage__'</span>, <span class="string">'__ident_func__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 数据存储，是一个字典</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__storage__'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前线程ID的方法</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__ident_func__'</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""以生成器的方式返回字典的所有元素"""</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个 LocalProxy"""</span></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""清空当前线程/协程所保存的数据"""</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""属性访问"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="string">"""属性设置"""</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""属性删除"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Local 的栈结构实现</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Local 实例</span></span><br><span class="line">        self._local = Local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放当前线程的数据</span></span><br><span class="line">        self._local.__release_local__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get__ident_func__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回获取当前线程ID的函数</span></span><br><span class="line">        <span class="keyword">return</span> self._local.__ident_func__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set__ident_func__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 设置获取当前线程ID的函数</span></span><br><span class="line">        object.__setattr__(self._local, <span class="string">'__ident_func__'</span>, value)</span><br><span class="line">    __ident_func__ = property(_get__ident_func__, _set__ident_func__)</span><br><span class="line">    <span class="keyword">del</span> _get__ident_func__, _set__ident_func__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回一个 LocalProxy 对象，该对象始终指向 LocalStack 实例的栈顶元素"""</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_lookup</span><span class="params">()</span>:</span></span><br><span class="line">            rv = self.top</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'object unbound'</span>)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line">        <span class="keyword">return</span> LocalProxy(_lookup)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""入栈"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""出栈"""</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">'stack'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            release_local(self._local)</span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取栈顶元素"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._local.stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">except</span> (AttributeError, IndexError):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@implements_bool</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Local 的代理模式实现，所有对 LocalProxy 对象的操作，包括属性访问、方法调用和二元操作</span></span><br><span class="line"><span class="string">    都会转发到那个 callable 参数返回的 Local 对象上</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __slots__ = (<span class="string">'__local'</span>, <span class="string">'__dict__'</span>, <span class="string">'__name__'</span>, <span class="string">'__wrapped__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span></span><br><span class="line">        <span class="comment"># 把 callable 参数绑定到 __local 属性上</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'_LocalProxy__local'</span>, local)</span><br><span class="line">        <span class="comment"># 代理名字</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'__name__'</span>, name)</span><br><span class="line">        <span class="keyword">if</span> callable(local) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(local, <span class="string">'__release_local__'</span>):</span><br><span class="line">            <span class="comment"># 注意这里的参数 local 仅仅是一个 callable 对象</span></span><br><span class="line">            <span class="comment"># 该对象执行返回的结果才是 Local 实例</span></span><br><span class="line">            object.__setattr__(self, <span class="string">'__wrapped__'</span>, local)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""获取当前 Local 实例"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.__local, <span class="string">'__release_local__'</span>):</span><br><span class="line">            <span class="keyword">return</span> self.__local()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__local, self.__name__)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'no object bound to %s'</span> % self.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dict__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._get_current_object().__dict__</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'__dict__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = self._get_current_object()</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;%s unbound&gt;'</span> % self.__class__.__name__</span><br><span class="line">        <span class="keyword">return</span> repr(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> bool(self._get_current_object())</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> unicode(self._get_current_object())  <span class="comment"># noqa</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> repr(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> dir(self._get_current_object())</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'__members__'</span>:</span><br><span class="line">            <span class="keyword">return</span> dir(self._get_current_object())</span><br><span class="line">        <span class="keyword">return</span> getattr(self._get_current_object(), name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self._get_current_object()[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._get_current_object()[key]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下面的源码省略，LocalProxy 重写了所有的魔法方法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 Python 的关键字 Yield</title>
    <url>/2018/03/14/understand-yield/</url>
    <content><![CDATA[<p>为了理解什么是yield,你必须理解什么是生成器。</p>
<p>在理解生成器之前，让我们先走近迭代。</p>
<p>当你建立了一个列表，你可以逐项地读取这个列表，这叫做一个可迭代对象。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>所有你可以使用for…in…语法的叫做一个迭代器，列表，字符串，文件等等，你经常使用它们是因为你可以如你所愿的读取其中的元素，但是你把所有的值都存储到了内存中，如果你有大量数据的话这个方式并不是你想要的。</p>
<p>生成器是可以迭代的，但是你只可以读取它一次，因为它并不把所有的值放在内存中，它是实时地生成数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mygenerator = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>你不可以再次迭代生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    next(mygenerator)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">"停止迭代"</span>)</span><br></pre></td></tr></table></figure>

<p>yield 是一个类似 return 的关键字，只是这个函数返回的是个生成器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_generator</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> i * i</span><br></pre></td></tr></table></figure>

<p>如果函数内部使用 return，则返回 0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mygenerator = create_generator()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>斐波拉契数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">()</span>:</span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x, y = y, x + y</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure>

<p>获取斐波拉契数列前10个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">list(itertools.islice(fib(), <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>杨辉三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangle</span><span class="params">()</span>:</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a = [sum(i) <span class="keyword">for</span> i <span class="keyword">in</span> zip([<span class="number">0</span>] + a, a + [<span class="number">0</span>])]</span><br></pre></td></tr></table></figure>

<p>输出前10行杨辉三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">list(itertools.islice(triangle(), <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>控制迭代器的穷尽</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span><span class="params">()</span>:</span></span><br><span class="line">    crisis = <span class="literal">False</span>  <span class="comment"># crisis是危机的意思</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_atm</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.crisis:</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">"$100"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bank = Bank()  <span class="comment"># 创建一个银行</span></span><br><span class="line">corner_street_atm = bank.create_atm()  <span class="comment"># 创建一个ATM机</span></span><br><span class="line">print([next(corner_street_atm) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line">bank.crisis = <span class="literal">True</span>  <span class="comment"># 危机来了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(next(corner_street_atm))</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">"corner_street_atm: no more money!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    wall_street_atm = bank.create_atm()</span><br><span class="line">    print(next(wall_street_atm))</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">"wall_street_atm: no more money!"</span>)</span><br><span class="line"></span><br><span class="line">bank.crisis = <span class="literal">False</span>  <span class="comment"># 问题是，即使改变crisis的值，ATM依然是空的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(next(corner_street_atm))</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">"crisis is %s, and still no more money!"</span> % bank.crisis)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建一个ATM机，现在有钱了</span></span><br><span class="line">brand_new_atm = bank.create_atm()</span><br><span class="line">print([next(brand_new_atm) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br></pre></td></tr></table></figure>

<p><code>itertools</code> 模块包含了许多特殊的迭代方法</p>
<p>比赛中4匹马可能到达终点的先后顺序的可能情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">horses = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">races = itertools.permutations(horses)</span><br><span class="line">print(races)</span><br><span class="line">pprint.pprint(list(races))</span><br></pre></td></tr></table></figure>

<p>一个实现了 <code>__iter__</code> 方法的对象是可迭代的，一个实现了 <code>__next__</code> 方法的对象是迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibs</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fibs = Fibs()</span><br><span class="line">print([next(fibs) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>RDS for MySQL 备份文件恢复到自建数据库</title>
    <url>/2018/09/13/rds-for-mysql/</url>
    <content><![CDATA[<p>云数据库MySQL版使用开源软件Percona Xtrabackup对数据库进行备份，所以您可以使用该软件将云数据库MySQL的备份文件恢复到自建数据库中，本文将介绍详细的操作步骤。</p>
<a id="more"></a>

<!-- toc -->

<h2 id="软件说明"><a href="#软件说明" class="headerlink" title="软件说明"></a>软件说明</h2><ol>
<li>MySQL 5.6.41</li>
<li>Percona XtraBackup 2.2.9</li>
<li><a href="http://oss.aliyuncs.com/aliyunecs/rds_backup_extract.sh?spm=a2c4g.11186623.2.6.3f4d5cf8Ze2ycZ&file=rds_backup_extract.sh" target="_blank" rel="noopener">rds_backup_extract.sh</a></li>
</ol>
<h2 id="解压数据库备份文件"><a href="#解压数据库备份文件" class="headerlink" title="解压数据库备份文件"></a>解压数据库备份文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">unzip -P密码 mysql_data_backup.tar.gz.zip</span><br><span class="line">bash rds_backup_extract -f mysql_data_backup.tar.gz -C /data/mysql/data</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件-backup-my-cnf-如下"><a href="#修改配置文件-backup-my-cnf-如下" class="headerlink" title="修改配置文件 backup-my.cnf 如下"></a>修改配置文件 <code>backup-my.cnf</code> 如下</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This MySQL options file was generated by innobackupex.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The MySQL server</span></span><br><span class="line">[mysqld]</span><br><span class="line">innodb_checksum_algorithm=innodb</span><br><span class="line"><span class="comment"># innodb_log_checksum_algorithm=innodb</span></span><br><span class="line">innodb_data_file_path=ibdata1:200M:autoextend</span><br><span class="line">innodb_log_files_in_group=2</span><br><span class="line">innodb_log_file_size=1572864000</span><br><span class="line"><span class="comment"># innodb_fast_checksum=false</span></span><br><span class="line"><span class="comment"># innodb_page_size=16384</span></span><br><span class="line"><span class="comment"># innodb_log_block_size=512</span></span><br><span class="line">innodb_undo_directory=.</span><br><span class="line">innodb_undo_tablespaces=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rds_encrypt_data=false</span></span><br><span class="line"><span class="comment"># innodb_encrypt_algorithm=aes_128_ecb</span></span><br></pre></td></tr></table></figure>

<h2 id="修改文件属主"><a href="#修改文件属主" class="headerlink" title="修改文件属主"></a>修改文件属主</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /data/mysql/data</span><br></pre></td></tr></table></figure>

<h2 id="恢复数据文件"><a href="#恢复数据文件" class="headerlink" title="恢复数据文件"></a>恢复数据文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 400 /data/mysql/data/backup-my.cnf</span><br><span class="line">innobackupex --defaults-file=/data/mysql/data/backup-my.cnf --apply-log /data/mysql/data</span><br></pre></td></tr></table></figure>

<h2 id="启动数据库并登入验证"><a href="#启动数据库并登入验证" class="headerlink" title="启动数据库并登入验证"></a>启动数据库并登入验证</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqld_safe --defaults-file=/data/mysql/data/backup-my.cnf --user=mysql --datadir=/data/mysql/data --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>

<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><p>恢复完成后，表 mysql.user 中是不包含 RDS 中创建的用户，需要新建，新建用户前请执行如下 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> mysql.db <span class="keyword">where</span> <span class="keyword">user</span>&lt;&gt;<span class="string">'root'</span> <span class="keyword">and</span> <span class="keyword">char_length</span>(<span class="keyword">user</span>)&gt;<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> mysql.tables_priv <span class="keyword">where</span> <span class="keyword">user</span>&lt;&gt;<span class="string">'root'</span> <span class="keyword">and</span> <span class="keyword">char_length</span>(<span class="keyword">user</span>)&gt;<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://help.aliyun.com/knowledge_detail/41817.html" target="_blank" rel="noopener">阿里云数据备份/恢复</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
</search>
